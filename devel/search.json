[{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2021 F. Hoffmann-La Roche AG and GlaxoSmithKline LLC  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/admiraldev.html","id":"dear-developers","dir":"Articles","previous_headings":"","what":"Dear Developers","title":"Get Started","text":"admiraldev set tools intended , developer, help make developing within admiral family easier, consistently robust across packages maybe even fun! Tools loosely defined follows: Utility Functions used admiral admiral extension functions custom checks providing custom messages, warnings errors. custom messages, warnings errors succinct, helpful messaging around function expects inputs. inputs admiral functions many, generally fit three categories: datasets, variables arguments. functions start assert_, is_ get_. Addins utility functions help documentation, testing checking health code base admiral packages. Vignettes working admiral functions, developing unit testing, releases process, vignette writing documentation needs. vignettes intended use across admiral packages.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/admiraldev.html","id":"why-have-a-separate-development-package","dir":"Articles","previous_headings":"","what":"Why have a separate development package?","title":"Get Started","text":"admiral package function base grown decided create extension packages use within companies specific TAs help specific problems. intended extension packages follow processes admiral core, e.g. Unit Testing, Roxygen Documentation, Function Design. standalone development package allows us keep date development process developers across family. also feel lot developer functions user-specific gives us freedom create release utility tools specific family packages reduces non-user facing functions within admiral family packages.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/admiraldev.html","id":"how-to-add-new-tools-to-admiraldev","dir":"Articles","previous_headings":"","what":"How to add new tools to {admiraldev}?","title":"Get Started","text":"Just like admiral, follow procedures adding issues discuss feature requests, bugs documentation updates. develop issues branches Pull Request Code Review. Experimental tools highly encouraged help reduce repetitive patterns automating boring stuff.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/admiraldev.html","id":"scenario-one-admiral-core","dir":"Articles","previous_headings":"When to add a function to {admiraldev}?","what":"Scenario One: {admiral} core","title":"Get Started","text":"developer working admiral core implements new type derivation function BDS-Findings ADaM dataset. new derivation function two new assert custom checking functions inputs well helper function. Loose guidelines: derivation function always live admiral core. helper function looked see made available within admiraldev extension packages needs reduce repetitive coding across family admiral. generalized, remain admiral. assert custom checking functions always live within admiraldev stay family assertion functions.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/admiraldev.html","id":"scenario-two-admiral-extension","dir":"Articles","previous_headings":"When to add a function to {admiraldev}?","what":"Scenario Two: {admiral} extension","title":"Get Started","text":"developer working {admiralonco} implements new type derivation function adding certain parameters oncology specific ADaM dataset. new derivation function one new assert custom checking function. Loose guidelines: derivation function closely looked see can generalized ADaM datasets. case, moved admiral core. function specific oncology needs, remain {admiralonco}. assert custom checking functions follow similar principle - can generalized therapeutic areas move admiraldev, whereas specific oncology needs, remain {admiralonco}.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Guidance for git and GitHub Usage","text":"article give overview admiral project utilizing version-control software git website GitHub working RStudio. go primary branches house source code admiral project well use Feature branches address Issues. Issues can range bugs enhancement identified requested developers, users testers. also provide bare minimum git commands needed get running. Please refer Resource section -depth guidance using git GitHub. Finally, discuss release process schedule admiral.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"branches","dir":"Articles","previous_headings":"","what":"Branches","title":"Guidance for git and GitHub Usage","text":"main branch contains latest released version used development. can find released versions devel branch contains latest development version package. always branching pulling devel branch. gh-pages branches contains code used render website looking right now! patch branch reserved special hot fixes address bugs. info Hot Fix Release pre-release branch used intermediate step releasing package main. info Quarterly Release section main, devel, gh-pages, patch pre-release branches protection. try push changes branches get error unless administrator. Feature branches actual development related specific issue happens. Feature branches merged devel pull request merged. Check Pull Request Review Guidance.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"working-with-feature-branches","dir":"Articles","previous_headings":"","what":"Working with Feature Branches","title":"Guidance for git and GitHub Usage","text":"Feature Branches developers work addressing Issues.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"implementing-an-issue","dir":"Articles","previous_headings":"Working with Feature Branches","what":"Implementing an Issue","title":"Guidance for git and GitHub Usage","text":"feature branch must related issue.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"naming-branches","dir":"Articles","previous_headings":"Working with Feature Branches > Implementing an Issue","what":"Naming Branches","title":"Guidance for git and GitHub Usage","text":"name branch must prefixed issue number, followed short meaningful description @<target_branch> suffix. latter @devel cases. example, given issue #94 “Program function derive LSTALVDT”, branch name 94_derive_var_lstalvdt@devel. @<target_branch> suffix used CI/CD pipelines, e.g. running R CMD check. ensures {admiral}’s upstream dependencies {admiral.test} installed specified target branch. target branch set @devel upstream dependencies installed devel branch rather installing latest released version. ensures test development version {admiral} development versions upstream dependencies. way packages kept sync.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"create-a-new-feature-branch-from-the-terminal-from-devel","dir":"Articles","previous_headings":"Working with Feature Branches > Implementing an Issue","what":"Create a New Feature Branch from the Terminal (from devel)","title":"Guidance for git and GitHub Usage","text":"Checkout devel branch: git checkout devel Pull latest changes GitHub: git pull Create new branch devel branch switch : git checkout -b <new_branch_name>","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"create-a-new-feature-branch-from-github-from-devel","dir":"Articles","previous_headings":"Working with Feature Branches > Implementing an Issue","what":"Create a New Feature Branch from GitHub (from devel)","title":"Guidance for git and GitHub Usage","text":"can also create feature branch GitHub. Switch devel branch Type new feature branch name Click Create branch: <your_branch_name> devel Sure Pull newly created branch RStudio","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"commits-from-the-terminal-in-rstudio","dir":"Articles","previous_headings":"Working with Feature Branches > Implementing an Issue","what":"Commits from the Terminal in RStudio","title":"Guidance for git and GitHub Usage","text":"start commit process, need tell git move changes staging area. Use git add <your_file> move changes <your_file> staging area wait next commit. can use git add . move files worked staging area. Next can commit, takes snapshot staged changes. committing, prefix message issue number add meaningful message git commit –m '#94 last alive date implementation'. Lastly, push changes GitHub using git push origin <branch name>","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"commits-from-the-git-tab-in-rstudio","dir":"Articles","previous_headings":"Working with Feature Branches > Implementing an Issue","what":"Commits from the Git Tab in RStudio","title":"Guidance for git and GitHub Usage","text":"can also make use Git Tab within RStudio commit changes. benefit using Tab able see changes file red green highlighting. Just like terminal, start message issue number add meaningful succinct sentence. Hit Commit button Push GitHub.  NOTE: Placing issue number commit message allows new developers quickly find discussion surrounding issue. pushed GitHub issue number hyperlink issue tracker. powerful tool discussion.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"pull-request","dir":"Articles","previous_headings":"Working with Feature Branches","what":"Pull request","title":"Guidance for git and GitHub Usage","text":"recommend thorough read articles, Pull Request Review Guidance Programming Strategy -depth discussions proper Pull Request. Pull Request authors benefit shorter review times closely following guidance provided two articles. discuss simple git commands terminal GitHub Pull Request. recommend Pull Request GitHub terminal. changes committed, push updated branch GitHub:git push -u origin <branch_name> GitHub, Pull requests, user either “Compare pull request” button /“Create Pull Request”. first button created GitHub detects recent changes made. branch merge must devel branch (base = devel) compare branch new branch merge - shown picture. Please pay close attention branch merging ! issue must linked pull request “Development” field Pull Request.  completed Pull Request see committed changes available reviewer. reviewer must specified Pull Request. recommended write brief summary reviewers can quickly come speed Pull Request. Pictures nice , easy GitHub! Use Screen Capture software Copy Paste summary.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"reviewingclosing-an-issue","dir":"Articles","previous_headings":"Working with Feature Branches > Pull request","what":"Reviewing/Closing an Issue","title":"Guidance for git and GitHub Usage","text":"least one reviewer must approve Pull Request. Please review Pull Request Review Guidance, provides depth guidance proper Pull Request. reviewer must ensure function follows programming strategy recommendations. comment/question/discussion must addressed documented GitHub Pull Request merged review completed, reviewer merge Pull Request feature branch automatically deleted. merging Pull Request corresponding issue must moved “Done” column “admiral core board” developer. issue must closed. closed automatically devel branch merged main branch.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"solving-merge-conflicts-in-the-terminal-on-rstudio","dir":"Articles","previous_headings":"Working with Feature Branches > Pull request","what":"Solving Merge Conflicts in the Terminal on RStudio","title":"Guidance for git and GitHub Usage","text":"Merge conflict situation git decide changes apply since multiple updates part file. typically happens multiple people update part code. conflicts always need handled manually (code updates may required): provides list files conflicts file conflicts conflicting sections marked <<<<<<<, =======, >>>>>>>. code markers must updated markers removed. Source files need updated manually. Generated files like NAMESPACE generated documentation files updated manually recreated source files updated. make changes available call:","code":"git checkout devel git pull git checkout <feature_branch>   git merge devel git add <file with conflict>  git commit -m \"<insert_message>\" git push"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"solving-merge-conflicts-in-github","dir":"Articles","previous_headings":"Working with Feature Branches > Pull request","what":"Solving Merge Conflicts in GitHub","title":"Guidance for git and GitHub Usage","text":"simple merge conflicts, developers can make use GitHub interface solve . GitHub show number conflicts two branches. image, GitHub found 3 conflicts, display first one. Just like terminal, GitHub make use <<<<<<<, =======, >>>>>>> highlight conflicting sections. need make decision whether keep code base feature branch. decided, go code remove section longer wish keep. sure remove <<<<<<<, =======, >>>>>>> well! work conflicts mark Resolved Commit changes. recommended pull branch back RStudio make sure untoward effects happen branch.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"useful-git-commands","dir":"Articles","previous_headings":"Working with Feature Branches","what":"Useful git Commands","title":"Guidance for git and GitHub Usage","text":"merging: git merge <my_branch> - merge my_branch current branch stashing commands useful one wants go back clean directory git stash - stash (store) current changes restore clean directory git stash pop - put back (restore) stashed changes git revert also helpful ? Using code unmerged branches Checkout unmerged branch want use: git checkout <unmerged_branch> Pull latest committed changes unmerged branch: git pull Check feature branch: git checkout <my_branch> Merge unmerged branch : git merge <unmerged_branch>","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/git_usage.html","id":"github_resources","dir":"Articles","previous_headings":"","what":"Resources on using git, GitHub and RStudio","title":"Guidance for git and GitHub Usage","text":"GitHub RStudio Happy Git GitHub useR","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Pull Request Review Guidance","text":"document intended guidance creators reviewers pull requests (PRs) admiral package. PR authors benefit shorter review times closely following guidance provided . pull request devel branch signifies issue “addressed”. issue might bug, feature request documentation update. transparency, keep issue open devel branch merged main branch, usually coincides release admiral CRAN. ensures repeat issues raised raised quickly marked duplicates closed. Closely following guidance ensure “addressed” issues auto-close merge devel main.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"review-criteria","dir":"Articles","previous_headings":"","what":"Review Criteria","title":"Pull Request Review Guidance","text":"pull request merged devel needs pass automated R CMD check, lintr, task-list-completed workflows GitHub minimum. first two checks can run locally using devtools::check() lintr::lint_package() commands recommended done pushing GitHub. task-list-completed workflow exclusive GitHub discussed later. addition, PR creator reviewer make sure Programming Strategy Development Process followed function ADaM IG compliant function intended (described header corresponding issue) function header properly explains intention function, expected inputs (incl. permitted values parameters) output produced; reading documentation reader able predict output function without read source code function accompanying set unit tests; derivations unit test code coverage least 90%; whole package coverage >= 80% implemented derivation scope admiral, e.g. expect company specific input hard-code company-specific rules meaningful error warning messages issued input invalid documentation created/updated running devtools::document() functions supposed exported listed NAMESPACE file; requires @export tag function header examples print relevant source variables newly created variables /records output NEWS.md file updated entry explains new features changes author function listed DESCRIPTION file files affected implemented changes, e.g. vignettes templates, updated","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"so-much-red-tape","dir":"Articles","previous_headings":"","what":"So much Red Tape!","title":"Pull Request Review Guidance","text":"admiral development team aware sympathetic great many checks, processes documents needed work order compliant Pull Request. task-list-completed GitHub workflow created help reduce burden contributors providing standardized checklist compiles information Pull Request Review Guidance, Programming Strategy Development Process vignettes. next three sections give high-level overview contributor faces opening PR, contributor interacts task-list-completed workflow PR.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"open-a-pull-request","dir":"Articles","previous_headings":"So much Red Tape!","what":"Open a Pull Request","title":"Pull Request Review Guidance","text":"contributor opens PR lengthy standard text inserted comment section. Please alter automated text. need manually add Closes #<insert_issue_number> title Pull Request. can use Edit button top right forget step start Pull Request. Besides free add additional textual information, screenshots, etc. bottom automated text needed clarify contribute discussion around PR.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"create-a-pull-request","dir":"Articles","previous_headings":"So much Red Tape!","what":"Create a Pull Request","title":"Pull Request Review Guidance","text":"click green Create pull request button automated text inserted turned checklist Pull Request. check box drawn previously mentioned vignettes presented recommended sequence. check boxes meant helpful aid ensuring created compliant Pull Request.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"complete-the-pull-request-checklist","dir":"Articles","previous_headings":"So much Red Tape!","what":"Complete the Pull Request checklist","title":"Pull Request Review Guidance","text":"check boxes linked task-list-completed workflow. need check box acknowledgment done due diligence creating compliant Pull Request. GitHub refresh Pull Request trigger task-list-completed workflow completed task. PR can merged devel contributor checked check box items.  Please don’t hesitate reach admiral team Slack GitHub Issues tracker think checklist needs amended clarity needed check box item.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"github-actionsworkflows","dir":"Articles","previous_headings":"","what":"GitHub Actions/Workflows","title":"Pull Request Review Guidance","text":"task-list-completed workflow one several workflows/actions used within admiral. workflows live .github/workflows folder important understand use remedy workflow fails. Workflows defined responsible assuring high package quality standards without compromising performance, security, reproducibility.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"a-synopsis-of-admirals-workflows","dir":"Articles","previous_headings":"GitHub Actions/Workflows","what":"A synopsis of admiral’s workflows","title":"Pull Request Review Guidance","text":"workflows BEGIN boilerplate steps END boilerplate steps section within define standard steps required installing system dependencies, R version R packages serve dependencies package. underlying mechanisms installing R Pandoc defined r-lib/actions, installation system dependencies R package dependencies managed via Staged Dependencies GitHub Action]. latter used conjunction staged_dependencies.yaml file order install dependencies stage development current package. Following installation system dependencies, R, package dependencies, workflow checks integrity specific component admiral codebase.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"check-templates-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"check-templates.yml","title":"Pull Request Review Guidance","text":"workflow checks issues within template scripts. example, admiral package several template scripts admiral-based functions showing build certain ADaM datasets. update admiral functions, want make sure template scripts execute appropriately. Functions template scripts deprecated used inappropriately cause workflow fail. Click details button failing action provides information template failing.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"code-coverage-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"code-coverage.yml","title":"Pull Request Review Guidance","text":"workflow measures code coverage unit tests reports code coverage percentage total number lines covered unit tests vs. total number lines codebase. covr R package used calculate coverage. Report summaries badges coverage generated using series GitHub Actions.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"links-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"links.yml","title":"Pull Request Review Guidance","text":"workflow checks whether URLs embedded code documentation valid. Invalid URLs results workflow failures. workflow uses lychee detect broken links. Occasionally check detect false positives urls look like urls. remedy, please add false positive .lycheeignore file.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"lintr-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"lintr.yml","title":"Pull Request Review Guidance","text":"Static code analysis performed workflow, turn uses lintr R package. .lintr configurations repository workflow.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"man-pages-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"man-pages.yml","title":"Pull Request Review Guidance","text":"workflow checks manual pages man/ directory package --date ROxygen comments code. Workflow failures indicate manual pages --date ROxygen comments, corrective actions provided workflow log.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"pkgdown-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"pkgdown.yml","title":"Pull Request Review Guidance","text":"Documentation R package generated via workflow. workflow uses pkgdown framework generate documentation HTML, HTML pages deployed gh-pages branch. Moreover, additional Versions dropdown generated via multi-version-docs GitHub Action, end user can view multiple versions documentation package.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"r-cmd-check-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"r-cmd-check.yml","title":"Pull Request Review Guidance","text":"workflow performs R CMD check package. Failed workflows typically indicative problems encountered check, therefore indication package meet quality standards.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"r-pkg-validation-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"r-pkg-validation.yml","title":"Pull Request Review Guidance","text":"new release package made, workflow executes create validation report via validation action. PDF report attached release within GitHub.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"readme-render-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"readme-render.yml","title":"Pull Request Review Guidance","text":"codebase uses README.Rmd file, workflow automatically render README.md commit branch.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"spellcheck-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"spellcheck.yml","title":"Pull Request Review Guidance","text":"Spellchecks performed workflow, spelling R package used detect spelling mistakes. Failed workflows typically indicate misspelled words. inst/WORDLIST file, can add words acronyms want spell check ignore, example occds English word common acronym used within Pharma. workflow flag user adds inst/WORDLIST.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"style-yml","dir":"Articles","previous_headings":"GitHub Actions/Workflows > A synopsis of admiral’s workflows","what":"style.yml","title":"Pull Request Review Guidance","text":"Code style enforced via styler R package. Custom style configurations, , honored workflow. Failed workflows indicative unstyled code.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"common-r-cmd-check-issues","dir":"Articles","previous_headings":"","what":"Common R CMD Check Issues","title":"Pull Request Review Guidance","text":"R CMD check command line tool checks R packages standard set criteria. pull request pass check must issue notes, warnings errors. list common issues resolve .","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"check-fails-only-on-one-version","dir":"Articles","previous_headings":"Common R CMD Check Issues","what":"Check Fails Only on One Version","title":"Pull Request Review Guidance","text":"R CMD check workflow fails one two R versions can helpful reproduce testing environment locally. reproduce particular R version environment open admiral project corresponding R version, comment line source(\"renv/activate.R\") .Rprofile file, restart R session run following commands R console. ensure exact package versions use workflow installed hidden folder .library. way existing R packages overwritten.","code":"Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS = \"true\")  if (!dir.exists(\".library\")) {   dir.create(\".library\") }  base_recommended_pkgs <- row.names(installed.packages(priority = \"high\")) for (pkg in base_recommended_pkgs) {   path <- file.path(.Library, pkg)   cmd <- sprintf(\"cp -r %s .library\", path)   system(cmd) } assign(\".lib.loc\", \".library\", envir = environment(.libPaths))  r_version <- getRversion() if (grepl(\"^4.0\", r_version)) {   options(repos = \"https://cran.microsoft.com/snapshot/2021-03-31\") } else if (grepl(\"^4.1\", r_version)) {   options(repos = \"https://cran.microsoft.com/snapshot/2022-03-10\") } else if (grepl(\"release\", r_version)) {   options(repos = \"https://cran.microsoft.com/snapshot/2022-06-23\") } else {   options(repos = \"https://cran.rstudio.com\") }  if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") } remotes::install_deps(dependencies = TRUE) remotes::install_github(\"pharmaverse/admiral.test\", ref = \"devel\") remotes::install_github(\"pharmaverse/admiraldev\", ref = \"devel\") rcmdcheck::rcmdcheck()"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"package-dependencies","dir":"Articles","previous_headings":"Common R CMD Check Issues","what":"Package Dependencies","title":"Pull Request Review Guidance","text":"Add pkg Imports Suggests field DESCRIPTION file. general, dependencies listed Imports field. However, package used inside vignettes unit tests listed Suggests admiral functions work without “soft” dependencies installed.","code":"> checking package dependencies ... ERROR   Namespace dependency not required: ‘pkg’"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"global-variables","dir":"Articles","previous_headings":"Common R CMD Check Issues","what":"Global Variables","title":"Pull Request Review Guidance","text":"Add some_var list “global” variables R/globals.R.","code":"❯ checking R code for possible problems ... NOTE   function_xyz: no visible binding for global variable ‘some_var’"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"undocumented-function-parameter","dir":"Articles","previous_headings":"Common R CMD Check Issues","what":"Undocumented Function Parameter","title":"Pull Request Review Guidance","text":"Add @param some_param section header function_xyz() run devtools::document() afterwards.","code":"❯ checking Rd \\usage sections ... WARNING   Undocumented arguments in documentation object 'function_xyz'     ‘some_param’"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/pr_review_guidance.html","id":"outdated-documentation","dir":"Articles","previous_headings":"Common R CMD Check Issues","what":"Outdated Documentation","title":"Pull Request Review Guidance","text":"name parameter changed function code yet header. Change @param old_param_name @param new_param_name run devtools::document().","code":"❯ checking for code/documentation mismatches ... WARNING   Codoc mismatches from documentation object 'function_xyz':   ...   Argument names in code not in docs:     new_param_name   Argument names in docs not in code:     old_param_name   Mismatches in argument names:     Position: 6 Code: new_param_name Docs: old_param_name"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Programming Strategy","text":"admiral intended contributed user community, article meant developers want either expand admiral functionalities build top admiral. order keep framework robust across whole community, defined programming strategy followed cases. contributions include, example, company specific derivations ADaM datasets.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"functional-workflow","dir":"Articles","previous_headings":"","what":"Functional Workflow","title":"Programming Strategy","text":"Overall programming follow functional approach. mandate use tidyverse (e.g. dplyr) similar functionality existing base R ADaM dataset built set functions free flow code. ADaM dataset specific programming workflow. function specific purpose supports ADaM Dataset programming workflow. admiral function company specific function. Admiral functions can re-used company specific functions. function belongs one category defined keywords/family. function used derive one multiple variable(s) required unit tested. Functions standard naming convention. Double coding used QC method (absolutely necessary). ADaMs created readable, submission-ready code.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"function-design","dir":"Articles","previous_headings":"Functions in R","what":"Function Design","title":"Programming Strategy","text":"Firstly, important explain decide need new derivation functions. derivation rule algorithm common highly similar across different variables/parameters (e.g. study day duration) provide generic function can used satisfy times may needed across different ADaMs. Similarly, feel certain derivation useful beyond single purpose also provide generic function (e.g. instead last known alive date function, extreme date function user find last date selection, example first). Otherwise, feel derivation rule unique need sufficiently complex justify opt dedicated function specific variable/parameter (e.g. treatment-emergent flag AEs). certain variables closely connected (e.g. imputed date corresponding imputation flag) single function provide variables. something needed ADaM achieved simply via existing tidyverse function, wrap admiral function, add unnecessary extra layer users. following principles key designing new function: Modularity - code follows modular approach, .e. steps must clearly separated dedicated purpose. applies scripts creating dataset module create single variable parameter. also complex derivations several steps. Commenting steps key readability. Avoid Copy Paste - similar code used multiple times, put separate function. improves readability maintainability makes unit testing easier. done every simple programming step tidyverse can used. rather computational functions data checks. However, also consider nest many functions. Checks - Whenever function fails, meaningful error message must provided clear reference input caused failure. users dig detailed code want apply function. meaningful error message supports usability. Flexibility - Functions flexible possible long reduce usability. example: source variables newly created variables conditions selecting observations hard-coded. useful parameter triggers optional steps, e.g. filter parameter specified, input dataset restricted, otherwise step skipped. However, parameters trigger completely different algorithms. example BNRIND derived based BASE based ANRIND. implemented within one function algorithms completely different. BASE used, values categorized ANRIND used, values merged baseline observation.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"input-output-and-side-effects","dir":"Articles","previous_headings":"Functions in R","what":"Input, Output, and Side-effects","title":"Programming Strategy","text":"behavior function determined input, global object, .e. input like datasets, variable names, options, … must provided function parameters. expected input datasets grouped. grouped, function must issue error. function requires grouping, function must provide by_vars parameter. output dataset must ungrouped. functions sort (arrange) output dataset end. function needs create temporary variables input dataset, names variables must generated get_new_tmp_var() avoid variables input dataset accidentically overwritten. temporary variables must removed output dataset calling remove_tmp_vars(). developers find need use create environment objects achieve flexibility, use admiral_environment environment object created admiral_environment.R. objects stored environment must documented admiral_environment.R. equivalent environment object .R file exist admiraldev well. details environments work, see relevant sections environments R Packages Advanced R textbooks. general, function must side-effects like creating modifying global objects, printing, writing files, …","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"admiral-options","dir":"Articles","previous_headings":"Functions in R","what":"Admiral Options","title":"Programming Strategy","text":"exception made admiral options, see get_admiral_option() set_admiral_options(), certain pre-defined defaults added flexibility allow user-defined defaults commonly used function arguments e.g. subject_keys currently pre-defined exprs(STUDYID, USUBJID), can modified using set_admiral_options(subject_keys = exprs(...)) top script. reasoning behind relieve user repeatedly changing aforementioned commonly used function arguments multiple times script, may called across many admiral functions. additional flexibility needs added another commonly used function argument e.g. future_input set exprs(...) can added admiral option. function formals define future_input = get_admiral_option(\"future_input\") proceed modify body roxygen documentation set_admiral_options().","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"function-names","dir":"Articles","previous_headings":"Functions in R","what":"Function Names","title":"Programming Strategy","text":"Function names start verb use snake case, e.g. derive_var_base(). Please note appropriate var/vars prefix used cases function creates variable(s), regardless presence new_var parameter function call.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"function-parameters","dir":"Articles","previous_headings":"Functions in R","what":"Function Parameters","title":"Programming Strategy","text":"default value optional parameters NULL. recommended parameter order contributors asked adhere (order keep consistency across functions): dataset (additional datasets denoted dataset_*) by_vars order new_var (related new_var_* parameters) filter (additional filters denoted filter_*) Make sure always mention start_date end_date (related). Names variables inside dataset passed symbols rather strings, .e. AVAL rather \"AVAL\". parameter accepts one variables input, variables wrapped inside exprs(). example: new_var = TEMPBL by_vars = exprs(PARAMCD, AVISIT) filter = PARAMCD == \"TEMP\" order = exprs(AVISIT, desc(AESEV)) Parameter must accept expressions assigning value new variable. Instead separate parameters need provided defining value. example, function derives variable may imputed, following acceptable. Separate parameters imputation must provided, e.g.: function parameter needs tested assert_ type function. expression needs tested following (many utility functions admiral available contributor): whether expression (list expressions, depending function) whether valid expression (.e. whether evaluates without error) exception derive_var_basetype() allowed use rlang::exprs(). reason case user needs flexibility provide just symbols usually complicated filtering conditions (may based multiple input parameters).","code":"...     new_var = exprs(mydtm = convert_dtc_to_dtm(impute_dtc(cmstdtc,                                                           date_imputation = \"last\",                                                           time_imputation = \"last\"))),     ... ...     new_var = mydtm,     source_var = cmstdtc,     date_imputation = \"last\",     time_imputation = \"last\",     ..."},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"common-function-parameters-naming-convention","dir":"Articles","previous_headings":"Functions in R","what":"Common Function Parameters Naming Convention","title":"Programming Strategy","text":"first parameter derive_ functions input dataset named dataset. one input dataset required, input dataset start dataset_, e.g., dataset_ex. Parameters specifying items add start new_. variable added, second part parameter name var, parameter added, param. example: new_var, new_var_unit, new_param. Parameters expect boolean boolean vector must start verb, e.g., is_imputed impute_date.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"source-code-formatting","dir":"Articles","previous_headings":"Functions in R","what":"Source Code Formatting","title":"Programming Strategy","text":"source code formatted according tidyverse style guide. lintr styler packages used check enforce .","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"comments","dir":"Articles","previous_headings":"Functions in R","what":"Comments","title":"Programming Strategy","text":"Comments added help readers author understand code. two main cases: intention chunk code clear, comment added. comment rephrase code provide additional information. Bad Good long functions (>100 lines) comments can added structure code simplify navigation. case comment end ---- add entry document outline RStudio. example: formatting comments must follow tidyverse style guide. .e., comment start single # space. decoration (except outline entries) must added. Bad Good","code":"# If AVAL equals zero, set it to 0.0001. Otherwise, do not change it   mutate(dataset, AVAL = if_else(AVAL == 0, 0.0001, AVAL)) # AVAL is to be displayed on a logarithmic scale.   # Thus replace zeros by a small value to avoid gaps.   mutate(dataset, AVAL = if_else(AVAL == 0, 0.0001, AVAL)) # Check arguments ---- # This is a comment #  ########################### # This is another comment # ###########################  #+++++++++++++++++++++++++++++++ # This is a section comment ---- #+++++++++++++++++++++++++++++++ # This is a comment  # This is another comment  # This is a section comment ----"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"input-checking","dir":"Articles","previous_headings":"Functions in R","what":"Input Checking","title":"Programming Strategy","text":"line fail-fast design principle, function inputs checked validity , ’s invalid input, function stop immediately error. exception case variable added function already exists input dataset: warning displayed function continue executing. Inputs checked using custom assertion functions defined R/assertions.R. custom assertion functions either return error case invalid input return nothing. common types input parameters like single variable, list variables, dataset, … functions checking available (see assertions). Parameters expect keywords handle case-insensitive manner, e.g., date_imputation = \"FIRST\" date_imputation = \"first\" accepted. assert_character_scalar() function helps handling parameters case-insensitive manner. parameter checked outer function parameter name inner function. rule applicable functions part admiral.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"function-header-documentation","dir":"Articles","previous_headings":"Functions in R","what":"Function Header (Documentation)","title":"Programming Strategy","text":"Every function exported package must accompanying header formatted according roxygen2 convention. addition roxygen2 parameters, @keywords also used. keywords used categorize function. Please see section “Categorization functions”. example given : following fields mandatory: @param: One entry per function parameter. following attributes described: expected data type (e.g. data.frame, logical, numeric etc.), default value (), permitted values (applicable), optionality (.e. required parameter). expected input dataset required variables clearly stated. @details: natural-language description derivation used inside function. @keyword: One applicable tag function - identical family. @family: One applicable tag function - identical keyword. @return: description return value function. newly added variable(-s) mentioned . @examples: fully self-contained example use function. Self-contained means , code executed new R session, run without errors. means packages need loaded library() datasets needed either created directly inside example code loaded using data(). dataset created example, done using function tribble() (specify library(tibble) calling function). functions called example, please specify library(pkg_name) refer respective function fun() opposed preferred pkg_name::fun() notation specified Unit Test Guidance. Make sure align columns ensures quick code readability. Copying descriptions avoided makes documentation hard maintain. example parameter description used one function, parameter described one function functions use @inheritParams <function name parameter described>. Please note @inheritParams func_first used header func_second() function, parameter descriptions func_first() included documentation func_second() parameter offered func_second() @param tag parameter included header func_second(). order @param tags function definition. @inheritParams tags @param. affect order parameter description rendered documentation makes easier maintain headers. Variable names, expressions, functions, code must enclosed backticks. render code. functions derive specific CDISC variable, title must state label variable without variable name. variable stated description.","code":"#' Derive Relative Day Variables #' #' Adds relative day variables (`--DY`) to the dataset, e.g., `ASTDY` and #' `AENDY`. #' #' @param dataset Input dataset #' #'   The columns specified by the `reference_date` and the `source_vars` #'   parameter are expected. #' #' @param reference_date The start date column, e.g., date of first treatment #' #'   A date or date-time object column is expected. #' #'   Refer to `derive_var_dt()` to impute and derive a date from a date #'   character vector to a date object. #' #' @param source_vars A list of datetime or date variables created using #'   `exprs()` from which dates are to be extracted. This can either be a list of #'   date(time) variables or named `--DY` variables and corresponding --DT(M) #'   variables e.g. `exprs(TRTSDTM, ASTDTM, AENDT)` or `exprs(TRTSDT, ASTDTM, #'   AENDT, DEATHDY = DTHDT)`. If the source variable does not end in --DT(M), a #'   name for the resulting `--DY` variable must be provided. #' #' @details The relative day is derived as number of days from the reference #'   date to the end date. If it is nonnegative, one is added. I.e., the #'   relative day of the reference date is 1. Unless a name is explicitly #'   specified, the name of the resulting relative day variable is generated #'   from the source variable name by replacing DT (or DTM as appropriate) with #'   DY. #' #' @return The input dataset with `--DY` corresponding to the `--DTM` or `--DT` #'   source variable(s) added #' #' @keywords der_date_time #' @family der_date_time #' #' @export #' #' @examples #' library(lubridate) #' library(dplyr, warn.conflicts = FALSE) #' library(tibble) #' #' datain <- tribble( #'   ~TRTSDTM,             ~ASTDTM,               ~AENDT, #'  \"2014-01-17T23:59:59\", \"2014-01-18T13:09:O9\", \"2014-01-20\" #' ) %>% #'  mutate( #'    TRTSDTM = as_datetime(TRTSDTM), #'    ASTDTM = as_datetime(ASTDTM), #'    AENDT = ymd(AENDT) #'  ) #' #' derive_vars_dy( #'   datain, #'   reference_date = TRTSDTM, #'   source_vars = exprs(TRTSDTM, ASTDTM, AENDT) #' )"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"categorization-of-functions","dir":"Articles","previous_headings":"Functions in R","what":"Categorization of Functions","title":"Programming Strategy","text":"functions categorized keywords families within roxygen header. Categorization important admiral user-facing functions base totals 125 growing! However, ease burden developers, decided keywords families identical roxygen header, specified via @keywords @family fields. reiterate, function must use keyword family. Also, please note keywords families case-sensitive.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"keywords","dir":"Articles","previous_headings":"Functions in R > Categorization of Functions","what":"@keywords","title":"Programming Strategy","text":"keywords allows reference page easily organized using certain pgkdown functions. example, using function has_keyword(der_bds_gen) _pkgdown.yml file building website collect BDS General Derivation functions display alphabetical order Reference Page section called BDS-Specific.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"family","dir":"Articles","previous_headings":"Functions in R > Categorization of Functions","what":"@family","title":"Programming Strategy","text":"families allow similar functions displayed See Also section function’s documentation. example, user looking derive_vars_dy() function documentation might interested Date/Time functions. Using @family tag der_date_time display Date/Time functions available admiral user See Also section derive_vars_dy() function documentation. Please take look function documentation derive_vars_dy() see family tag action. list available keyword/family tags used admiral functions. think additional keyword/family tag added, please add issue GitHub discussion. NOTE: strongly encouraged @keyword @family identical. eases burden development maintenance admiral functions. need use multiple keywords families, please reach core development team discussion.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"missing-values","dir":"Articles","previous_headings":"","what":"Missing values","title":"Programming Strategy","text":"Missing values (NAs) need explicitly shown. Regarding character vectors converted SAS files: SAS treats missing character values blank. imported R empty strings (\"\") although nature missing values (NA). empty strings originate like need converted proper R missing values NA.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"file-structuring","dir":"Articles","previous_headings":"","what":"File Structuring","title":"Programming Strategy","text":"Organizing functions files art science. Thus, hard rules just recommendations. First foremost, two extremes avoided: putting function file putting functions single file. Apart following recommendations taken consideration deciding upon file structuring: function long (together documentation), store separate file functions documented together, put one file functions sort commonality relevance one another (like dplyr::bind_rows() dplyr::bind_cols()), put one file Store functions together helpers methods 1000 lines single file, unless necessary (exceptions , example, classes methods) responsibility author new function reviewer ensure recommendations put practice.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"r-package-dependencies","dir":"Articles","previous_headings":"","what":"R Package Dependencies","title":"Programming Strategy","text":"Package dependencies documented DESCRIPTION file. package used examples /unit tests listed Suggests, otherwise Imports. Functions packages explicitly imported using @importFrom tag R/admiral-package.R file. import if_else() mutate() function dplyr following line included file: #' @importFrom dplyr if_else mutate. functions become critically important using admiral included export. applies functions frequently called within {admiral }function calls like rlang::exprs(), dplyr::desc() pipe operator magrittr::%>%. export functions, following R code included R/reexports.R file using format:","code":"#' @export pkg_name::fun"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"Programming Strategy","text":"Functions perform derivation logic add kind metadata, e.g. labels.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"unit-testing","dir":"Articles","previous_headings":"","what":"Unit Testing","title":"Programming Strategy","text":"function requires set unit tests verify produces expected result. See Writing Unit Tests {admiral} details.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"deprecation","dir":"Articles","previous_headings":"","what":"Deprecation","title":"Programming Strategy","text":"admiral still evolving, functions parameters may need removed replaced efficient options one release another. cases, relevant function parameter must marked deprecated. deprecation done three phases release cycles. Phase 1: release identified function parameter deprecated warning issued using function parameter using deprecate_warn() Phase 2: next release error thrown using deprecate_stop() Phase 3: Finally 3rd release thereafter function removed package altogether Information deprecation timelines must added warning/error message. Note deprecation cycle time function parameter based current release schedule 6 months.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"documentation","dir":"Articles","previous_headings":"Deprecation","what":"Documentation","title":"Programming Strategy","text":"function parameter removed, documentation must updated indicate function parameter now deprecated new function/parameter used instead. documentation updated : description level function, keywords replaced deprecated @family roxygen tag become deprecated @examples section removed. @param level parameter.","code":"#' Title of the function #' #' @description #' `r lifecycle::badge(\"deprecated\")` #' #' This function is *deprecated*, please use `new_fun()` instead. #' . #' @family deprecated #' #' @keywords deprecated #' . @param old_param *Deprecated*, please use `new_param` instead."},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"handling-of-warning-and-error","dir":"Articles","previous_headings":"Deprecation","what":"Handling of warning and error","title":"Programming Strategy","text":"function parameter deprecated, function must updated issue warning error using deprecate_warn() deprecate_stop(), respectively, described . test case added tests/testthat/test-deprecation.R checks whether warning/error issued appropriate using deprecated function parameter.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"function","dir":"Articles","previous_headings":"Deprecation > Handling of warning and error","what":"Function","title":"Programming Strategy","text":"initial release function deprecated original function body must replaced call deprecate_warn() subsequently arguments passed new function. following release function body changed just include call deprecate_stop(). Finally, next release function removed package.","code":"fun_xxx <- function(dataset, some_param, other_param) {   deprecate_warn(\"x.y.z\", \"fun_xxx()\", \"new_fun_xxx()\")   new_fun_xxx(     dataset = dataset,     some_param = some_param,     other_param = other_param   ) } fun_xxx <- function(dataset, some_param, other_param) {   deprecate_stop(\"x.y.z\", \"fun_xxx()\", \"new_fun_xxx()\") }"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"parameter","dir":"Articles","previous_headings":"Deprecation > Handling of warning and error","what":"Parameter","title":"Programming Strategy","text":"parameter removed replaced, error must generated: parameter renamed replaced, warning must issued new parameter takes value old parameter next release. Note: parameters passed exprs() argument (e.g. new_var = VAR1 filter = AVAL >10) need quoted.","code":"### BEGIN DEPRECATION   if (!missing(old_param)) {     deprecate_stop(\"x.y.z\", \"fun_xxx(old_param = )\", \"fun_xxx(new_param = )\")   } ### END DEPRECATION ### BEGIN DEPRECATION   if (!missing(old_param)) {     deprecate_warn(\"x.y.z\", \"fun_xxx(old_param = )\", \"fun_xxx(new_param = )\")     # old_param is given using exprs()     new_param <- old_param     # old_param is NOT given using exprs()     new_param <- enexpr(old_param)   } ### END DEPRECATION"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"unit-testing-1","dir":"Articles","previous_headings":"Deprecation","what":"Unit Testing","title":"Programming Strategy","text":"Unit tests deprecated functions parameters must added tests/testthat/test-deprecation.R ensure warning error issued. writing unit test, check error warning right class, .e. “lifecycle_error_deprecated” “lifecycle_warning_deprecated”, respectively. unit-test follow corresponding format, per unit test guidance: unit tests deprecated functions must removed.","code":"# For deprecated functions that issues error  ## Test #: An error is thrown if `derive_var_example()` is called ---- test_that(\"deprecation Test #: derive_var_example() An error is thrown if           `derive_var_example()` is called\", {   expect_error(     derive_var_example(),     class = \"lifecycle_error_deprecated\"   ) }) # For deprecated functions that issues warning  ## Test #: A warning is thrown if `derive_var_example()` is called ---- test_that(\"deprecation Test #: derive_var_example() A warning is thrown if           `derive_var_example()` is called\", {   expect_warning(     derive_var_example(),     class = \"lifecycle_warning_deprecated\"   ) })"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"best-practices-and-hints","dir":"Articles","previous_headings":"","what":"Best Practices and Hints","title":"Programming Strategy","text":"Please take following list recommendation try adhere rules possible. Parameters function calls named except first parameter (e.g. assert_data_frame(dataset, required_vars = exprs(var1, var2), optional = TRUE)). dplyr::if_else() used two conditions. Try always set missing parameter whenever appropriate.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/programming_strategy.html","id":"r-and-package-versions-for-development","dir":"Articles","previous_headings":"","what":"R and package versions for development","title":"Programming Strategy","text":"choice R Version set stone. However, common development environment important establish working across multiple companies multiple developers. currently work earliest three latest R Versions. need common development environment also carries choice package versions. GitHub allows us Actions/Workflows test admiral several versions R well several versions dependent R packages needed admiral. Currently test admiral three latest R Versions closest snapshots packages R versions. can view workflow others admiralci GitHub Repository. common development allows us easily re-create bugs provide solutions issues developers encounter. Reviewers Pull Requests running code know environment identical initiator Pull Request. ensures faster review times higher quality Pull Request reviews. achieve common development environment using lockfile created renv package. New developers encounter suggested renv::restore() console revert move forward R version package versions.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/release_strategy.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Release Strategy","text":"article explains package releases admiral across package extensions. includes details around planned/scheduled releases, well hotfixes.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/release_strategy.html","id":"release-schedule","dir":"Articles","previous_headings":"","what":"Release Schedule","title":"Release Strategy","text":"release schedule maintained homepage.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/release_strategy.html","id":"planning-releases","dir":"Articles","previous_headings":"","what":"Planning Releases","title":"Release Strategy","text":"Whenever start looking towards future release, create new release issue label GitHub form release Q4-2022 example. can added issues plan cover release can moved Priority column project board. share advance users high level summary expected package updates via community meetings, especially anticipated breaking changes.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/release_strategy.html","id":"quarterly-release","dir":"Articles","previous_headings":"Package Release Process","what":"Quarterly Release","title":"Release Strategy","text":"package release done five parts: Create Pull Request devel pre-release branch. Issues identified Pull Request work done separate branches merged pre-release branch devel. Verify CI/CD checks passing devel pre-release Pull Request, merge bundle send CRAN. package available CRAN, another Pull Request created merging pre-release branch main branch. trigger GitHub action rebuild admiral website updates release. Use release button GitHub “release” package onto GitHub. release onto Github archives version code within main branch, attaches News/Changelog file, bundles code tar.gz file makes validation report via GitHub action validation insightsengineering/validatoR. Please see past admiral releases reference. issues fixed pre-release/main branches merged back devel. Quarterly Release: devel >> pre-release >> main","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/release_strategy.html","id":"hot-fix-release","dir":"Articles","previous_headings":"Package Release Process","what":"Hot Fix Release","title":"Release Strategy","text":"Occasionally need release hot fix address package breaking bug. hot fix release done 6 parts: Identify bugs need fixed hot fix release label hot fix label. Branches addressing bugs Pull Requests merged patch branch devel branch. naming branch follow naming conventions guide use @main suffix Create Pull Request patch pre-release branch. Verify CI/CD checks passing, merge bundle send CRAN. package approved available CRAN, another Pull Request created merging pre-release branch main branch. trigger action rebuild admiral website updates hot fix release. Use release button GitHub “release” package onto GitHub. release onto Github archives version code within main branch, attaches News/Changelog file, bundles code tar.gz file makes validation report via GitHub action validation insightsengineering/validatoR. Please see past admiral releases reference. hot fixes merged devel branch additional Pull Request. Hot Fix Release: patch >> pre-release >> main  >> devel","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/release_strategy.html","id":"communications","dir":"Articles","previous_headings":"","what":"Communications","title":"Release Strategy","text":"release, raise awareness via Slack channel LinkedIn.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"unit-tests-become-a-safety-net-for-developers","dir":"Articles","previous_headings":"Why Write Unit Tests?","what":"Unit Tests Become a Safety Net for Developers","title":"Unit Test Guidance","text":"comprehensive suite unit tests can act safety net developers. frequently running tests, can assure recent modifications code haven’t broken anything. words, unit tests help prevent regressions.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"unit-tests-can-contribute-to-higher-code-quality","dir":"Articles","previous_headings":"Why Write Unit Tests?","what":"Unit Tests Can Contribute to Higher Code Quality","title":"Unit Test Guidance","text":"Since unit tests act safety net, developers become confident changing code. can refactor code without fear breaking things, driving general quality code base .","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"unit-tests-can-contribute-to-better-application-architecture","dir":"Articles","previous_headings":"Why Write Unit Tests?","what":"Unit Tests Can Contribute to Better Application Architecture","title":"Unit Test Guidance","text":"can add unit tests easily code base, ’s usually good sign regarding quality app’s architecture. , drive write testable code can incentive better architecture.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"detects-code-smells-in-your-codebase","dir":"Articles","previous_headings":"Why Write Unit Tests?","what":"Detects Code Smells in your Codebase","title":"Unit Test Guidance","text":"ease adding unit tests code base good sign, opposite also true. hard time creating unit tests given piece code might sign code smells code—e.g. functions complex.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"tests-should-be-fast","dir":"Articles","previous_headings":"Writing Good Unit Tests","what":"Tests Should Be Fast","title":"Unit Test Guidance","text":"’re slow, developers won’t run often . defeats whole purpose suite unit tests first place, boost developers’ confidence make changes code. tests can’t work safety net ’re run often.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"tests-should-be-simple","dir":"Articles","previous_headings":"Writing Good Unit Tests","what":"Tests Should Be Simple","title":"Unit Test Guidance","text":"several techniques can apply high degree confidence correctness tests. One keep tests low cyclomatic complexity. Cyclomatic complexity code metric indicates number possible execution paths given method can follow. piece code lower complexity easier understand maintain, means developers less likely introduce bugs working . can measure cyclomatic complexity tests (using, instance, linter tool) best keep low.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"test-shouldnt-duplicate-implementation-logic","dir":"Articles","previous_headings":"Writing Good Unit Tests","what":"Test Shouldn’t Duplicate Implementation Logic","title":"Unit Test Guidance","text":"person wrote test implementation, ’s possible made errors places. Since tests mirror implementation, might still pass, implementation wrong, tests might fool thinking otherwise. Resist urge make tests fancy, keep simple, testing suite better .","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"tests-should-be-readable","dir":"Articles","previous_headings":"Writing Good Unit Tests","what":"Tests Should Be Readable","title":"Unit Test Guidance","text":"best practice overlaps little bit one keeping tests simple. tests hard read, developers likely misunderstand introduce bugs. Test cases used form documentation, obviously need readable.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"running-unit-tests-part-of-the-build-process","dir":"Articles","previous_headings":"Writing Good Unit Tests","what":"Running Unit Tests Part of the Build Process","title":"Unit Test Guidance","text":"Automate whole process running unit tests taking action fail. build process execute unit tests mark build broken tests fail.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"plan-your-unit-tests","dir":"Articles","previous_headings":"Writing Unit Tests in {admiral}","what":"Plan your Unit Tests","title":"Unit Test Guidance","text":"Start considering derivation rule testing possible arguments/flexibilities function code. plan scenarios test. can either involve generating different input test cases feeding different calls function.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"test-coverage","dir":"Articles","previous_headings":"Writing Unit Tests in {admiral}","what":"Test coverage","title":"Unit Test Guidance","text":"Unit tests cover functionality function. another function g() called within function f(), unit tests f() test functionality g(). tested unit tests g(), .e. unit tests added lowest level.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"tests-should-be-robust-to-cover-realistic-data-scenarios","dir":"Articles","previous_headings":"Writing Unit Tests in {admiral}","what":"Tests Should be Robust to Cover Realistic Data Scenarios","title":"Unit Test Guidance","text":"generating input test cases, can helpful consider regular cases (expected common data scenarios), boundary cases (data points close equal), special cases (uncommon valid data scenarios, e.g. missing special characters). Although never cover every single eventuality possible input data (reliability testing method ever gives 100% certainty), need give confidence code robust enough work across data scenarios.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"testing-should-cover-possible-arguments","dir":"Articles","previous_headings":"Writing Unit Tests in {admiral}","what":"Testing Should Cover Possible Arguments","title":"Unit Test Guidance","text":"different calls function, consider user might apply function test variety possible calls, whilst still remembering tips tests fast simple. needed cases complexity level flexibility function justifies , e.g. see test script: https://github.com/pharmaverse/admiral/blob/main/tests/testthat/test-derive_var_extreme_flag.R.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"exported-functions","dir":"Articles","previous_headings":"Writing Unit Tests in {admiral}","what":"Exported Functions","title":"Unit Test Guidance","text":"Don’t forget add unit test exported function.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"set-up-the-test-script","dir":"Articles","previous_headings":"Writing Unit Tests in {admiral}","what":"Set up the Test Script","title":"Unit Test Guidance","text":"Within tests/testthat folder project, add script naming convention test-<script_containing_function>.R., unit test script can created console also, follows: testing framework used testthat following format : example, testing function called my_new_func contained script all_funcs.R console use: Open newly created file test-all_funcs.R use following format: Note: comparing datasets admiral use function expect_dfs_equal(). input expected output unit tests must follow following rules: Input output simple possible. Values hard-coded whenever possible. values need derived, unit tested functions can used. contrast Programming Strategy documentation function examples, test files include library(pkg_name) calls. dataset needs created testing purposes, done using function tribble() tibble package following command tibble::tribble(<data >). Furthermore, functions need called, also done using pkg_name::fun()notation. Make sure align columns well. ensures quick code readability. Ensure give meaningful explanation test testthat call, compiled package validation report. name function test ID included title also help traceability. comments ending ---- create entries TOC RStudio.","code":"usethis::use_test(\"<script_containing_function>\") ## Test 1: <Explanation of the test> ---- test_that(\"<function_name> Test 1: <Explanation of the test>\", {      input <- tibble::tribble(     ~inputvar1, ~inputvar2, ...     <Add Test Data Scenarios>     ...   )    expected_output <- mutate(input, outputvar = c(<Add Expected Outputs>))    expect_dfs_equal(<function name>(input), expected_output)    }) usethis::use_test(\"all_funcs\") # my_new_func ---- ## Test 1: <Explanation of the test> ---- test_that(\"my_new_func Test 1: <Explanation of the test>\", {      input <- tibble::tribble(     ~inputvar1, ~inputvar2, ...     <Add Test Data Scenarios>     ...   )    expected_output <- mutate(input, outputvar = c(<Add Expected Outputs>))    expect_dfs_equal(<function name>(input), expected_output) })"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"addin-admiraldevformat_test_that_file","dir":"Articles","previous_headings":"Writing Unit Tests in {admiral}","what":"Addin admiraldev::format_test_that_file()","title":"Unit Test Guidance","text":"ease burden developers writing adding tests developed Addin formatting test_that test files according admiral programming standards. Addin add update comments well number re-numbers tests. Just use Addin button select “Format test_that test file” seen image. sure test-file open selected calling Addin.  Addin perform following: Updates adds number tests comments test_that() call Updates comments based description provided test_that() call Updates function name test_that() call. function name extracted last # <function name> ---- comment test_that() call. test file tests one function, comments added first test function. test files tests single function , comments can omitted. case addin determines function name file name stripping “test-” prefix “.R” suffix. writing new unit tests, just provide description test_that() call necessary function name # <function name> ---- comment: Call addin get: tested unit test program, can run unit tests console, follows. running just tests current file call","code":"# arg_name ---- test_that(\"arg_name works\", {   expect_equal(arg_name(sym(\"a\")), \"a\")   expect_equal(arg_name(call(\"enquo\", sym(\"a\"))), \"a\")   expect_error(arg_name(\"a\"), \"Could not extract argument name from\") })  # convert_dtm_to_dtc ---- test_that(\"works if dtm is in correct format\", {   expect_equal(     convert_dtm_to_dtc(as.POSIXct(\"2022-04-05 15:34:07 UTC\")),     \"2022-04-05T15:34:07\"   ) })  test_that(\"Error is thrown if dtm is not in correct format\", {   expect_error(     convert_dtm_to_dtc(\"2022-04-05T15:26:14\"),     \"lubridate::is.instant(dtm) is not TRUE\",     fixed = TRUE   ) }) # arg_name ---- ## Test 1: arg_name works ---- test_that(\"arg_name Test 1: arg_name works\", {   expect_equal(arg_name(sym(\"a\")), \"a\")   expect_equal(arg_name(call(\"enquo\", sym(\"a\"))), \"a\")   expect_error(arg_name(\"a\"), \"Could not extract argument name from\") })  # convert_dtm_to_dtc ---- ## Test 2: works if dtm is in correct format ---- test_that(\"convert_dtm_to_dtc Test 2: works if dtm is in correct format\", {   expect_equal(     convert_dtm_to_dtc(as.POSIXct(\"2022-04-05 15:34:07 UTC\")),     \"2022-04-05T15:34:07\"   ) })  ## Test 3: Error is thrown if dtm is not in correct format ---- test_that(\"convert_dtm_to_dtc Test 3: Error is thrown if dtm is not in correct format\", {   expect_error(     convert_dtm_to_dtc(\"2022-04-05T15:26:14\"),     \"lubridate::is.instant(dtm) is not TRUE\",     fixed = TRUE   ) }) devtools::test() devtools::test_file()"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/unit_test_guidance.html","id":"automation-of-unit-tests","dir":"Articles","previous_headings":"Writing Unit Tests in {admiral}","what":"Automation of Unit Tests","title":"Unit Test Guidance","text":"user actions pull request {admiral} GitHub repo, unit tests automatically run pull request denied unit tests fail.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/writing_vignettes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Writing Vignettes","text":"guidance ensures consistency across vignettes admiral package terms content, structure code execution. general rule, vignette workflow defined r-pkgs.org followed.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/writing_vignettes.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"Writing Vignettes","text":"vignette admiral start following metadata. <Title> vignette meaningful.","code":"--- title: \"<Title>\" output:  rmarkdown::html_vignette: vignette: >   %\\VignetteIndexEntry{<Title>}   %\\VignetteEngine{knitr::rmarkdown} ---"},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/writing_vignettes.html","id":"default-options","dir":"Articles","previous_headings":"Markdown","what":"Default Options","title":"Writing Vignettes","text":"chunks used within vignette, following options set metadata ensure chunks rendered consistently across vignettes.","code":"```{r setup, include=FALSE} knitr::opts_chunk$set(   collapse = TRUE,   comment = \"#>\" ) ```"},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/writing_vignettes.html","id":"table-of-contents","dir":"Articles","previous_headings":"Markdown > Format Sections","what":"Table of Contents","title":"Writing Vignettes","text":"Headings must title case start Heading 1: first section gives brief introduction vignette. last sub-section introduction describe packages required run admiral functions. admiral package described first. warning=FALSE message=FALSE options prevent usual messages: Attaching package: ‘xxxx’following objects masked ‘package:yyyyy’ fun1, fun2","code":"# Heading 1 This is the description of my first section.  ## Heading 1.1 This is the description of my first sub-section within my first section.  ## Heading 1.2 This is the description of my second sub-section within my first section. # Introduction  This is the introduction of my vignette.  ## Required Packages ```{r, warning=FALSE, message=FALSE} library(admiral) # <all packages used in the vignette> ```"},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/writing_vignettes.html","id":"general-conventions","dir":"Articles","previous_headings":"Markdown > Format Sections > Conventions","what":"General Conventions","title":"Writing Vignettes","text":"new vignette must added _pkgdown.yml file relevant section. variable name, dataset name, function, argument name must quoted backticks: e.g. Functions must also end (). Variables datasets name expected uppercase. codes must described, executed output result displayed code executed. Use: output created must clearly show function derived. least show variables/records used input function derived variables/records. dataset must displayed, formatted using dataset_vignette() function displayed consistently across vignettes.E.g. Description execution code used derive variable/record Output dataset formatted using dataset_vignette()… #TODO - Fix Note: call get formatted dataset : Displaying many big datasets vignette, may require long time load page may cause messages browser page responsive. case number displayed observations restricted either restricting source datasets beginning vignette call dataset_vignette() calls affected.","code":"The `date` parameter of the `derive_my_var()` function expects a date variable, e.g., `ADT`. ```{r} #<code> ``` vs1 <- admiral_vs %>%   derive_vars_dt(     new_vars_prefix = \"A\",     dtc = VSDTC,     date_imputation = \"first\"   ) ```r   dataset_vignette(     vs1,     display_vars = exprs(USUBJID, VSTESTCD, VISIT, VSDTC, ADT),     filter = VSTESTCD == \"WEIGHT\"   )   ```"},{"path":"https://pharmaverse.github.io/admiraldev/devel/articles/writing_vignettes.html","id":"conventions-for-adam-workflow","dir":"Articles","previous_headings":"Markdown > Format Sections > Conventions","what":"Conventions for ADaM Workflow","title":"Writing Vignettes","text":"vignettes describing ADaM workflow, second section summarize programming workflow. first sub-section within workflow always describe data read demonstrate use admiral functions, sub-section within programming workflow tagged (e.g. [Step1] (#step)), user can go relevant section programming workflow (addition Table contents). Don’t use tag number use meaningful name (e.g. use (#link1), use (#this_action)) last section link template script. ADSL variables ADSL variables required derivation merged SDTM dataset first derivation. ADSL variables added -variables derivations add observations. ensures ADSL variables populated new observations. adsl_vars variable created beginning script added by_vars parameter derivations add observations. ADSL variables final dataset required derivation merged dataset last derivation.","code":"# Programming Workflow  * [Read in Data](#readdata) * [Derive/Impute End and Start Analysis Date/time and Relative Day](#datetime) * ... * [Assign `ASEQ`](#aseq)  ## Read in Data {#readdata} ## Derive/Impute End and Start Analysis Date/time and Relative Day {#datetime} ## ... ## Assign `ASEQ` {#aseq}  # Another Section  # Example Script ADaM | Sample Code ---- | -------------- ADxx | [ad_adxx.R](https://github.com/pharmaverse/admiral/blob/main/inst/templates/ad_adxx.R){target=\"_blank\"}"},{"path":"https://pharmaverse.github.io/admiraldev/devel/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Straub. Author, maintainer. Stefan Bundfuss. Author. Thomas Neitmann. Author. Samia Kabi. Author. Pooja Kumari. Author. Syed Mubasheer. Author. Ross Farrugia. Author. Sadchla Mascary. Author. Zelos Zhu. Author. Jeffrey Dickinson. Author. Ania Golab. Author. Ondrej Slama. Contributor. F. Hoffmann-La Roche AG. Copyright holder, funder. GlaxoSmithKline LLC. Copyright holder, funder.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Straub B, Bundfuss S, Neitmann T, Kabi S, Kumari P, Mubasheer S, Farrugia R, Mascary S, Zhu Z, Dickinson J, Golab (2023). admiraldev: Development Tools Admiral Package Family. https://pharmaverse.github.io/admiraldev/main/, https://github.com/pharmaverse/admiraldev/.","code":"@Manual{,   title = {admiraldev: Development Tools for the Admiral Package Family},   author = {Ben Straub and Stefan Bundfuss and Thomas Neitmann and Samia Kabi and Pooja Kumari and Syed Mubasheer and Ross Farrugia and Sadchla Mascary and Zelos Zhu and Jeffrey Dickinson and Ania Golab},   year = {2023},   note = {https://pharmaverse.github.io/admiraldev/main/, https://github.com/pharmaverse/admiraldev/}, }"},{"path":"https://pharmaverse.github.io/admiraldev/devel/index.html","id":"admiraldev-","dir":"","previous_headings":"","what":"Development Tools for the Admiral Package Family","title":"Development Tools for the Admiral Package Family","text":"ADaM R Asset Library Development Utilities","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Development Tools for the Admiral Package Family","text":"Tools developing functions maintaining healthy code base within family admiral R packages. admiraldev intended used developing admiral admiral extension packages. NOTE: package intended standalone use rather central dependency developer utilities admiral extension packages","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Development Tools for the Admiral Package Family","text":"package available CRAN can installed running install.packages(\"admiraldev\"). install latest development version package directly GitHub use following code:","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") }  remotes::install_github(\"pharmaverse/admiraldev\", ref = \"devel\")"},{"path":"https://pharmaverse.github.io/admiraldev/devel/index.html","id":"release-schedule","dir":"","previous_headings":"","what":"Release Schedule","title":"Development Tools for the Admiral Package Family","text":"admiraldev officially released CRAN one week official release admiral. can find release schedule admiral packages .","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/add_suffix_to_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Suffix to Variables in a List of Expressions — add_suffix_to_vars","title":"Add a Suffix to Variables in a List of Expressions — add_suffix_to_vars","text":"Add suffix variables list expressions","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/add_suffix_to_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Suffix to Variables in a List of Expressions — add_suffix_to_vars","text":"","code":"add_suffix_to_vars(order, vars, suffix)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/add_suffix_to_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Suffix to Variables in a List of Expressions — add_suffix_to_vars","text":"order List expressions Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) vars Variables change Permitted Values: list variables created exprs() suffix Suffix Permitted Values: character scalar","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/add_suffix_to_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Suffix to Variables in a List of Expressions — add_suffix_to_vars","text":"list expression element suffix (suffix) added every symbol specified vars","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/add_suffix_to_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Suffix to Variables in a List of Expressions — add_suffix_to_vars","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(rlang) #>  #> Attaching package: ‘rlang’ #> The following object is masked from ‘package:admiraldev’: #>  #>     is_named  add_suffix_to_vars(exprs(ADT, desc(AVAL), AVALC), vars = exprs(AVAL), suffix = \".join\") #> [[1]] #> ADT #>  #> [[2]] #> desc(AVAL.join) #>  #> [[3]] #> AVALC #>"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/admiraldev-package.html","id":null,"dir":"Reference","previous_headings":"","what":"admiraldev: Development Tools for the Admiral Package Family — admiraldev-package","title":"admiraldev: Development Tools for the Admiral Package Family — admiraldev-package","text":"Utility functions check data, variables conditions functions used 'admiral' 'admiral' extension packages. Additional utility helper functions assist developers maintaining documentation, testing general upkeep 'admiral' 'admiral' extension packages.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/admiraldev-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"admiraldev: Development Tools for the Admiral Package Family — admiraldev-package","text":"Maintainer: Ben Straub ben.x.straub@gsk.com Authors: Stefan Bundfuss Thomas Neitmann Samia Kabi Pooja Kumari Syed Mubasheer Ross Farrugia Sadchla Mascary Zelos Zhu Jeffrey Dickinson Ania Golab contributors: Ondrej Slama [contributor] F. Hoffmann-La Roche AG [copyright holder, funder] GlaxoSmithKline LLC [copyright holder, funder]","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/arg_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Argument Name from an Expression — arg_name","title":"Extract Argument Name from an Expression — arg_name","text":"Extract Argument Name Expression","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/arg_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Argument Name from an Expression — arg_name","text":"","code":"arg_name(expr)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/arg_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Argument Name from an Expression — arg_name","text":"expr expression created inside function using substitute()","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/arg_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Argument Name from an Expression — arg_name","text":"character vector","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_atomic_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument an Atomic Vector? — assert_atomic_vector","title":"Is an Argument an Atomic Vector? — assert_atomic_vector","text":"Checks argument atomic vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_atomic_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument an Atomic Vector? — assert_atomic_vector","text":"","code":"assert_atomic_vector(arg, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_atomic_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument an Atomic Vector? — assert_atomic_vector","text":"arg function argument checked optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_atomic_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument an Atomic Vector? — assert_atomic_vector","text":"function throws error arg atomic vector. Otherwise, input returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_atomic_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument an Atomic Vector? — assert_atomic_vector","text":"","code":"example_fun <- function(x) {   assert_atomic_vector(x) }  example_fun(1:10)  try(example_fun(list(1, 2))) #> Error in assert_atomic_vector(x) :  #>   `x` must be an atomic vector but is a list"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_character_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a Character Scalar (String)? — assert_character_scalar","title":"Is an Argument a Character Scalar (String)? — assert_character_scalar","text":"Checks argument character scalar (optionally) whether matches one provided values.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_character_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a Character Scalar (String)? — assert_character_scalar","text":"","code":"assert_character_scalar(   arg,   values = NULL,   case_sensitive = TRUE,   optional = FALSE )"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_character_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a Character Scalar (String)? — assert_character_scalar","text":"arg function argument checked values character vector valid values arg. Values converted lower case vector case_sensitive = FALSE used. case_sensitive argument handled case-sensitive? set FALSE, argument converted lower case checking permitted values returning argument. optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_character_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a Character Scalar (String)? — assert_character_scalar","text":"function throws error arg character vector arg character vector length > 1 value one values specified. Otherwise, input returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_character_scalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a Character Scalar (String)? — assert_character_scalar","text":"","code":"example_fun <- function(msg_type) {   assert_character_scalar(msg_type, values = c(\"warning\", \"error\")) }  example_fun(\"warning\")  try(example_fun(\"message\")) #> Error in assert_character_scalar(msg_type, values = c(\"warning\", \"error\")) :  #>   `msg_type` must be one of 'warning' or 'error' but is 'message'  try(example_fun(TRUE)) #> Error in assert_character_scalar(msg_type, values = c(\"warning\", \"error\")) :  #>   `msg_type` must be a character scalar but is `TRUE`  # handling parameters case-insensitive example_fun2 <- function(msg_type) {   msg_type <- assert_character_scalar(     msg_type,     values = c(\"warning\", \"error\"),     case_sensitive = FALSE   )   if (msg_type == \"warning\") {     print(\"A warning was requested.\")   } }  example_fun2(\"Warning\") #> [1] \"A warning was requested.\""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_character_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a Character Vector? — assert_character_vector","title":"Is an Argument a Character Vector? — assert_character_vector","text":"Checks argument character vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_character_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a Character Vector? — assert_character_vector","text":"","code":"assert_character_vector(arg, values = NULL, named = FALSE, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_character_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a Character Vector? — assert_character_vector","text":"arg function argument checked values character vector valid values arg named set TRUE, error issued elements vector named. optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_character_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a Character Vector? — assert_character_vector","text":"function throws error arg character vector element included list valid values. Otherwise, input returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_character_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a Character Vector? — assert_character_vector","text":"","code":"example_fun <- function(chr) {   assert_character_vector(chr) }  example_fun(letters)  try(example_fun(1:10)) #> Error in assert_character_vector(chr) :  #>   `chr` must be a character vector but is an integer vector  example_fun2 <- function(chr) {   assert_character_vector(chr, named = TRUE) }  try(example_fun2(c(alpha = \"a\", \"b\", gamma = \"c\"))) #> Error in assert_character_vector(chr, named = TRUE) :  #>   All elements of chr must be named. #> The following elements are not named: 2"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a Data Frame? — assert_data_frame","title":"Is an Argument a Data Frame? — assert_data_frame","text":"Checks argument data frame (optionally) whether contains set required variables","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a Data Frame? — assert_data_frame","text":"","code":"assert_data_frame(   arg,   required_vars = NULL,   check_is_grouped = TRUE,   optional = FALSE )"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a Data Frame? — assert_data_frame","text":"arg function argument checked required_vars list variables created using exprs() check_is_grouped Throw error dataset grouped? Defaults TRUE. optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a Data Frame? — assert_data_frame","text":"function throws error arg data frame arg data frame misses variable specified required_vars. Otherwise, input returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a Data Frame? — assert_data_frame","text":"","code":"library(admiral.test) library(dplyr, warn.conflicts = FALSE) library(rlang) data(admiral_dm)  example_fun <- function(dataset) {   assert_data_frame(dataset, required_vars = exprs(STUDYID, USUBJID)) }  example_fun(admiral_dm)  try(example_fun(select(admiral_dm, -STUDYID))) #> Error in assert_data_frame(dataset, required_vars = exprs(STUDYID, USUBJID)) :  #>   Required variable `STUDYID` is missing  try(example_fun(\"Not a dataset\")) #> Error in assert_data_frame(dataset, required_vars = exprs(STUDYID, USUBJID)) :  #>   `dataset` must be a data frame but is `\"Not a dataset\"`"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_date_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a Variable in a Dataset a Date or Datetime Variable? — assert_date_var","title":"Is a Variable in a Dataset a Date or Datetime Variable? — assert_date_var","text":"Checks variable dataset date datetime variable","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_date_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a Variable in a Dataset a Date or Datetime Variable? — assert_date_var","text":"","code":"assert_date_var(dataset, var, dataset_name = NULL, var_name = NULL)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_date_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a Variable in a Dataset a Date or Datetime Variable? — assert_date_var","text":"dataset dataset variable expected var variable check dataset_name name dataset. argument specified, specified name displayed error message. var_name name variable. argument specified, specified name displayed error message.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_date_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a Variable in a Dataset a Date or Datetime Variable? — assert_date_var","text":"function throws error var date datetime variable dataset returns input invisibly otherwise.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_date_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a Variable in a Dataset a Date or Datetime Variable? — assert_date_var","text":"","code":"library(tibble) library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union library(rlang)  example_fun <- function(dataset, var) {   var <- assert_symbol(enexpr(var))   assert_date_var(dataset = dataset, var = !!var) }  my_data <- tribble(   ~USUBJID, ~ADT,   \"1\",      ymd(\"2020-12-06\"),   \"2\",      ymd(\"\") )  example_fun(   dataset = my_data,   var = ADT )  try(example_fun(   dataset = my_data,   var = USUBJID )) #> Error in assert_date_var(dataset = dataset, var = !!var) :  #>   `USUBJID` in dataset `dataset` is not a date or datetime variable but is a character vector  example_fun2 <- function(dataset, var) {   var <- assert_symbol(enexpr(var))   assert_date_var(     dataset = dataset,     var = !!var,     dataset_name = \"your_data\",     var_name = \"your_var\"   ) }  try(example_fun2(   dataset = my_data,   var = USUBJID )) #> Error in assert_date_var(dataset = dataset, var = !!var, dataset_name = \"your_data\",  :  #>   `your_var` in dataset `your_data` is not a date or datetime variable but is a character vector"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_date_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an object a date or datetime vector? — assert_date_vector","title":"Is an object a date or datetime vector? — assert_date_vector","text":"Check object/vector date datetime variable without needing dataset input","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_date_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an object a date or datetime vector? — assert_date_vector","text":"","code":"assert_date_vector(arg, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_date_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an object a date or datetime vector? — assert_date_vector","text":"arg function argument checked optional checked parameter optional? set FALSE arg NULL function assert_date_vector exits early throw error.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_date_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an object a date or datetime vector? — assert_date_vector","text":"function returns error arg missing, date datetime variable otherwise returns invisible output.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_date_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an object a date or datetime vector? — assert_date_vector","text":"","code":"example_fun <- function(arg) {   assert_date_vector(arg) }  example_fun(   as.Date(\"2022-01-30\", tz = \"UTC\") ) try(example_fun(\"1993-07-14\")) #> Error in assert_date_vector(arg) :  #>   `arg` must be a date or datetime variable but it's `a string`"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Argument is an Expression — assert_expr","title":"Assert Argument is an Expression — assert_expr","text":"Assert Argument Expression","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Argument is an Expression — assert_expr","text":"","code":"assert_expr(arg, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Argument is an Expression — assert_expr","text":"arg function argument checked optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Argument is an Expression — assert_expr","text":"function throws error arg expression, .e. either symbol call, returns input invisibly otherwise","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_filter_cond.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a Filter Condition? — assert_filter_cond","title":"Is an Argument a Filter Condition? — assert_filter_cond","text":"Argument Filter Condition?","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_filter_cond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a Filter Condition? — assert_filter_cond","text":"","code":"assert_filter_cond(arg, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_filter_cond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a Filter Condition? — assert_filter_cond","text":"arg Quosure - filtering condition. optional Logical - argument optional? Defaults FALSE.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_filter_cond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a Filter Condition? — assert_filter_cond","text":"Performs necessary checks returns arg pass. Otherwise throws informative error.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_filter_cond.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is an Argument a Filter Condition? — assert_filter_cond","text":"Check arg suitable filtering condition used functions like subset dplyr::filter.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_filter_cond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a Filter Condition? — assert_filter_cond","text":"","code":"library(admiral.test) library(dplyr, warn.conflicts = FALSE) library(rlang) data(admiral_dm)  # typical usage in a function as a parameter check example_fun <- function(dat, x) {   x <- assert_filter_cond(enquo(x))   filter(dat, !!x) }  example_fun(admiral_dm, AGE == 64) #> # A tibble: 5 x 25 #>   STUDYID   DOMAIN USUBJID   SUBJID RFSTDTC   RFENDTC  RFXSTDTC RFXENDTC RFICDTC #>   <chr>     <chr>  <chr>     <chr>  <chr>     <chr>    <chr>    <chr>    <chr>   #> 1 CDISCPIL… DM     01-701-1… 1023   2012-08-… 2012-09… 2012-08… 2012-09… \"\"      #> 2 CDISCPIL… DM     01-703-1… 1042   2013-03-… 2013-08… 2013-03… 2013-08… \"\"      #> 3 CDISCPIL… DM     01-706-1… 1041   2013-12-… 2014-07… 2013-12… 2014-07… \"\"      #> 4 CDISCPIL… DM     01-713-1… 1179   2013-08-… 2014-02… 2013-08… 2014-02… \"\"      #> 5 CDISCPIL… DM     01-717-1… 1344   2014-01-… 2014-03… 2014-01… 2014-03… \"\"      #> # … with 16 more variables: RFPENDTC <chr>, DTHDTC <chr>, DTHFL <chr>, #> #   SITEID <chr>, AGE <dbl>, AGEU <chr>, SEX <chr>, RACE <chr>, ETHNIC <chr>, #> #   ARMCD <chr>, ARM <chr>, ACTARMCD <chr>, ACTARM <chr>, COUNTRY <chr>, #> #   DMDTC <chr>, DMDY <dbl>  try(example_fun(admiral_dm, USUBJID)) #> Error in (function (e)  : Problem with `filter()` input `..1`. #> ✖ Input `..1` must be a logical vector, not a character. #> ℹ Input `..1` is `USUBJID`."},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Argument a Function? — assert_function","title":"Is Argument a Function? — assert_function","text":"Checks argument function expected parameters provided function.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Argument a Function? — assert_function","text":"","code":"assert_function(arg, params = NULL, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Argument a Function? — assert_function","text":"arg function argument checked params character vector expected parameter names optional checked parameter optional? set FALSE arg NULL error thrown.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Argument a Function? — assert_function","text":"function throws error argument function function provide parameters specified params parameter.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is Argument a Function? — assert_function","text":"","code":"example_fun <- function(fun) {   assert_function(fun, params = c(\"x\")) }  example_fun(mean)  try(example_fun(1)) #> Error in assert_function(fun, params = c(\"x\")) :  #>   `fun` must be a function but is `1`  try(example_fun(sum)) #> Error in assert_function(fun, params = c(\"x\")) :  #>   `x` is not a parameter of the function specified for `fun`"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_function_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Argument is a Parameter of a Function — assert_function_param","title":"Assert Argument is a Parameter of a Function — assert_function_param","text":"Assert Argument Parameter Function","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_function_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Argument is a Parameter of a Function — assert_function_param","text":"","code":"assert_function_param(arg, params)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_function_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Argument is a Parameter of a Function — assert_function_param","text":"arg name function passed string params character vector function parameters","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_function_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Argument is a Parameter of a Function — assert_function_param","text":"function throws error elements params parameter function given arg","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_function_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert Argument is a Parameter of a Function — assert_function_param","text":"","code":"hello <- function(name) {   print(sprintf(\"Hello %s\", name)) }  assert_function_param(\"hello\", \"name\")  try(assert_function_param(\"hello\", \"surname\")) #> Error in assert_function_param(\"hello\", \"surname\") :  #>   `surname` is not a parameter of `hello()`"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_has_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a Dataset Contain All Required Variables? — assert_has_variables","title":"Does a Dataset Contain All Required Variables? — assert_has_variables","text":"Checks dataset contains required variables","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_has_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a Dataset Contain All Required Variables? — assert_has_variables","text":"","code":"assert_has_variables(dataset, required_vars)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_has_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a Dataset Contain All Required Variables? — assert_has_variables","text":"dataset data.frame required_vars character vector variable names","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_has_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a Dataset Contain All Required Variables? — assert_has_variables","text":"function throws error required variables missing input dataset. Otherwise, dataset returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_has_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does a Dataset Contain All Required Variables? — assert_has_variables","text":"","code":"library(admiral.test) data(admiral_dm)  assert_has_variables(admiral_dm, \"STUDYID\")  try(assert_has_variables(admiral_dm, \"AVAL\")) #> Error in assert_has_variables(admiral_dm, \"AVAL\") :  #>   Required variable `AVAL` is missing."},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_integer_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument an Integer Scalar? — assert_integer_scalar","title":"Is an Argument an Integer Scalar? — assert_integer_scalar","text":"Checks argument integer scalar","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_integer_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument an Integer Scalar? — assert_integer_scalar","text":"","code":"assert_integer_scalar(arg, subset = \"none\", optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_integer_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument an Integer Scalar? — assert_integer_scalar","text":"arg function argument checked subset subset integers arg part . one \"none\" (default), \"positive\", \"non-negative\" \"negative\". optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_integer_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument an Integer Scalar? — assert_integer_scalar","text":"function throws error arg integer belonging specified subset. Otherwise, input returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_integer_scalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument an Integer Scalar? — assert_integer_scalar","text":"","code":"example_fun <- function(num1, num2) {   assert_integer_scalar(num1, subset = \"positive\")   assert_integer_scalar(num2, subset = \"negative\") }  example_fun(1, -9)  try(example_fun(1.5, -9)) #> Error in assert_integer_scalar(num1, subset = \"positive\") :  #>   `num1` must be a positive integer scalar but is `1.5`  try(example_fun(2, 0)) #> Error in assert_integer_scalar(num2, subset = \"negative\") :  #>   `num2` must be a negative integer scalar but is `0`  try(example_fun(\"2\", 0)) #> Error in assert_integer_scalar(num1, subset = \"positive\") :  #>   `num1` must be a positive integer scalar but is `\"2\"`"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_list_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Element of a List of Lists/Classes Fulfilling a Condition? — assert_list_element","title":"Is an Element of a List of Lists/Classes Fulfilling a Condition? — assert_list_element","text":"Checks elements list named lists/classes fulfill certain condition. , error issued elements list fulfilling condition listed.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_list_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Element of a List of Lists/Classes Fulfilling a Condition? — assert_list_element","text":"","code":"assert_list_element(list, element, condition, message_text, ...)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_list_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Element of a List of Lists/Classes Fulfilling a Condition? — assert_list_element","text":"list list checked list named lists classes expected. element name element lists/classes character scalar expected. condition Condition fulfilled condition evaluated element list. element lists/classes can referred name, e.g., censor == 0 check censor field class. message_text Text displayed message text describe condition fulfilled, e.g., \"events censor values must zero.\". ... Objects required evaluate condition condition contains objects apart element, passed function. See second example .","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_list_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Element of a List of Lists/Classes Fulfilling a Condition? — assert_list_element","text":"error condition meet. input otherwise.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a List of Objects of a Specific S3 Class or Type? — assert_list_of","title":"Is an Argument a List of Objects of a Specific S3 Class or Type? — assert_list_of","text":"Checks argument list objects inheriting S3 class type specified.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a List of Objects of a Specific S3 Class or Type? — assert_list_of","text":"","code":"assert_list_of(arg, class, named = FALSE, optional = TRUE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a List of Objects of a Specific S3 Class or Type? — assert_list_of","text":"arg function argument checked class S3 class type check named set TRUE, error issued elements list named. optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a List of Objects of a Specific S3 Class or Type? — assert_list_of","text":"function throws error arg list arg list elements objects inheriting class type class. Otherwise, input returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a List of Objects of a Specific S3 Class or Type? — assert_list_of","text":"","code":"example_fun <- function(list) {   assert_list_of(list, \"data.frame\") }  example_fun(list(mtcars, iris))  try(example_fun(list(letters, 1:10))) #> Error in assert_list_of(list, \"data.frame\") :  #>   Each element of `list` must be an object of class/type 'data.frame' but the following are not: #> ✖ Element 1 is a character vector #> ✖ Element 2 is an integer vector  try(example_fun(c(TRUE, FALSE))) #> Error in assert_s3_class(arg, \"list\") :  #>   `arg` must be an object of class 'list' but is a logical vector  example_fun2 <- function(list) {   assert_list_of(list, \"numeric\", named = TRUE) } try(example_fun2(list(1, 2, 3, d = 4))) #> Error in assert_list_of(list, \"numeric\", named = TRUE) :  #>   All elements of list must be named. #> The following elements are not named: 1, 2 and 3"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_logical_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a Logical Scalar (Boolean)? — assert_logical_scalar","title":"Is an Argument a Logical Scalar (Boolean)? — assert_logical_scalar","text":"Checks argument logical scalar","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_logical_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a Logical Scalar (Boolean)? — assert_logical_scalar","text":"","code":"assert_logical_scalar(arg, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_logical_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a Logical Scalar (Boolean)? — assert_logical_scalar","text":"arg function argument checked optional checked parameter optional? set FALSE arg NULL error thrown. Otherwise, NULL considered valid value.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_logical_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a Logical Scalar (Boolean)? — assert_logical_scalar","text":"function throws error arg neither TRUE FALSE. Otherwise, input returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_logical_scalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a Logical Scalar (Boolean)? — assert_logical_scalar","text":"","code":"example_fun <- function(flag) {   assert_logical_scalar(flag) }  example_fun(FALSE)  try(example_fun(NA)) #> Error in assert_logical_scalar(flag) :  #>   `flag` must be either `TRUE` or `FALSE` but is `NA`  try(example_fun(c(TRUE, FALSE, FALSE))) #> Error in assert_logical_scalar(flag) :  #>   `flag` must be either `TRUE` or `FALSE` but is a logical vector  try(example_fun(1:10)) #> Error in assert_logical_scalar(flag) :  #>   `flag` must be either `TRUE` or `FALSE` but is an integer vector"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_named_exprs.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Argument is a Named List of Expressions — assert_named_exprs","title":"Assert Argument is a Named List of Expressions — assert_named_exprs","text":"Assert Argument Named List Expressions","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_named_exprs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Argument is a Named List of Expressions — assert_named_exprs","text":"","code":"assert_named_exprs(arg, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_named_exprs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Argument is a Named List of Expressions — assert_named_exprs","text":"arg function argument checked optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_named_exprs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Argument is a Named List of Expressions — assert_named_exprs","text":"function throws error arg named list expression returns input invisibly otherwise","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_numeric_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a Numeric Vector? — assert_numeric_vector","title":"Is an Argument a Numeric Vector? — assert_numeric_vector","text":"Checks argument numeric vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_numeric_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a Numeric Vector? — assert_numeric_vector","text":"","code":"assert_numeric_vector(arg, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_numeric_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a Numeric Vector? — assert_numeric_vector","text":"arg function argument checked optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_numeric_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a Numeric Vector? — assert_numeric_vector","text":"function throws error arg numeric vector. Otherwise, input returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_numeric_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a Numeric Vector? — assert_numeric_vector","text":"","code":"example_fun <- function(num) {   assert_numeric_vector(num) }  example_fun(1:10)  try(example_fun(letters)) #> Error in assert_numeric_vector(num) :  #>   `num` must be a numeric vector but is a character vector"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_one_to_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Is There a One to One Mapping between Variables? — assert_one_to_one","title":"Is There a One to One Mapping between Variables? — assert_one_to_one","text":"Checks one one mapping two lists variables.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_one_to_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is There a One to One Mapping between Variables? — assert_one_to_one","text":"","code":"assert_one_to_one(dataset, vars1, vars2)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_one_to_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is There a One to One Mapping between Variables? — assert_one_to_one","text":"dataset Dataset checked variables specified vars1 vars2 expected. vars1 First list variables vars2 Second list variables","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_one_to_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is There a One to One Mapping between Variables? — assert_one_to_one","text":"error condition meet. input otherwise.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_order_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a List of Order Variables? — assert_order_vars","title":"Is an Argument a List of Order Variables? — assert_order_vars","text":"Checks argument valid list order variables created using exprs()","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_order_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a List of Order Variables? — assert_order_vars","text":"","code":"assert_order_vars(arg, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_order_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a List of Order Variables? — assert_order_vars","text":"arg function argument checked optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_order_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a List of Order Variables? — assert_order_vars","text":"function throws error arg list variables desc() calls created using exprs() returns input invisibly otherwise.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_order_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a List of Order Variables? — assert_order_vars","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(rlang)  example_fun <- function(by_vars) {   assert_order_vars(by_vars) }  example_fun(exprs(USUBJID, PARAMCD, desc(AVISITN)))  try(example_fun(quos(USUBJID, PARAMCD))) #> Error in assert_order_vars(by_vars) :  #>   `by_vars` must be a list of unquoted variable names or `desc()` calls, e.g. `exprs(USUBJID, desc(VISITNUM))`  try(example_fun(c(\"USUBJID\", \"PARAMCD\", \"VISIT\"))) #> Error in assert_order_vars(by_vars) :  #>   `by_vars` must be a list of unquoted variable names or `desc()` calls, e.g. `exprs(USUBJID, desc(VISITNUM))`  try(example_fun(exprs(USUBJID, toupper(PARAMCD), -AVAL))) #> Error in assert_order_vars(by_vars) :  #>   `by_vars` must be a list of unquoted variable names or `desc()` calls, e.g. `exprs(USUBJID, desc(VISITNUM))`"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_param_does_not_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Asserts That a Parameter Does Not Exist in the Dataset — assert_param_does_not_exist","title":"Asserts That a Parameter Does Not Exist in the Dataset — assert_param_does_not_exist","text":"Checks parameter (PARAMCD) exist dataset.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_param_does_not_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asserts That a Parameter Does Not Exist in the Dataset — assert_param_does_not_exist","text":"","code":"assert_param_does_not_exist(dataset, param)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_param_does_not_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asserts That a Parameter Does Not Exist in the Dataset — assert_param_does_not_exist","text":"dataset data.frame param Parameter code check","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_param_does_not_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asserts That a Parameter Does Not Exist in the Dataset — assert_param_does_not_exist","text":"function throws error parameter exists input dataset. Otherwise, dataset returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_param_does_not_exist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asserts That a Parameter Does Not Exist in the Dataset — assert_param_does_not_exist","text":"","code":"library(tibble) advs <- tribble(   ~USUBJID, ~VSTESTCD, ~VSTRESN, ~VSSTRESU, ~PARAMCD, ~AVAL,   \"P01\",    \"WEIGHT\",      80.1, \"kg\",      \"WEIGHT\",  80.1,   \"P02\",    \"WEIGHT\",      85.7, \"kg\",      \"WEIGHT\",  85.7 ) assert_param_does_not_exist(advs, param = \"HR\") try(assert_param_does_not_exist(advs, param = \"WEIGHT\")) #> Error in assert_param_does_not_exist(advs, param = \"WEIGHT\") :  #>   The parameter code 'WEIGHT' does already exist in `advs`."},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_s3_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument an Object of a Specific S3 Class? — assert_s3_class","title":"Is an Argument an Object of a Specific S3 Class? — assert_s3_class","text":"Checks argument object inheriting S3 class specified.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_s3_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument an Object of a Specific S3 Class? — assert_s3_class","text":"","code":"assert_s3_class(arg, class, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_s3_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument an Object of a Specific S3 Class? — assert_s3_class","text":"arg function argument checked class S3 class check optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_s3_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument an Object of a Specific S3 Class? — assert_s3_class","text":"function throws error arg object inherit class. Otherwise, input returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_s3_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument an Object of a Specific S3 Class? — assert_s3_class","text":"","code":"example_fun <- function(obj) {   assert_s3_class(obj, \"factor\") }  example_fun(as.factor(letters))  try(example_fun(letters)) #> Error in assert_s3_class(obj, \"factor\") :  #>   `obj` must be an object of class 'factor' but is a character vector  try(example_fun(1:10)) #> Error in assert_s3_class(obj, \"factor\") :  #>   `obj` must be an object of class 'factor' but is an integer vector"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_same_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Are All Argument of the Same Type? — assert_same_type","title":"Are All Argument of the Same Type? — assert_same_type","text":"Checks arguments type.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_same_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are All Argument of the Same Type? — assert_same_type","text":"","code":"assert_same_type(...)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_same_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are All Argument of the Same Type? — assert_same_type","text":"... Arguments checked","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_same_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are All Argument of the Same Type? — assert_same_type","text":"function throws error arguments type.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_same_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are All Argument of the Same Type? — assert_same_type","text":"","code":"example_fun <- function(true_value, false_value, missing_value) {   assert_same_type(true_value, false_value, missing_value) }  example_fun(   true_value = \"Y\",   false_value = \"N\",   missing_value = NA_character_ )  try(example_fun(   true_value = 1,   false_value = 0,   missing_value = \"missing\" )) #> Error in assert_same_type(true_value, false_value, missing_value) :  #>   All arguments must be of the same type. #> Argument: Type #> -------------- #> true_value: double #> false_value: double #> missing_value: character"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_symbol.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a Symbol? — assert_symbol","title":"Is an Argument a Symbol? — assert_symbol","text":"Checks argument symbol","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_symbol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a Symbol? — assert_symbol","text":"","code":"assert_symbol(arg, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_symbol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a Symbol? — assert_symbol","text":"arg function argument checked. Must symbol. See examples. optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_symbol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a Symbol? — assert_symbol","text":"function throws error arg symbol returns input invisibly otherwise.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_symbol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a Symbol? — assert_symbol","text":"","code":"library(admiral.test) library(dplyr, warn.conflicts = FALSE) library(rlang) data(admiral_dm)  example_fun <- function(dat, var) {   var <- assert_symbol(enexpr(var))   select(dat, !!var) }  example_fun(admiral_dm, USUBJID) #> # A tibble: 306 x 1 #>    USUBJID     #>    <chr>       #>  1 01-701-1015 #>  2 01-701-1023 #>  3 01-701-1028 #>  4 01-701-1033 #>  5 01-701-1034 #>  6 01-701-1047 #>  7 01-701-1057 #>  8 01-701-1097 #>  9 01-701-1111 #> 10 01-701-1115 #> # … with 296 more rows  try(example_fun(admiral_dm)) #> Error in assert_symbol(enexpr(var)) :  #>   Argument `var` missing, with no default  try(example_fun(admiral_dm, \"USUBJID\")) #> Error in assert_symbol(enexpr(var)) :  #>   `var` must be a symbol but is `\"USUBJID\"`  try(example_fun(admiral_dm, toupper(PARAMCD))) #> Error in assert_symbol(enexpr(var)) :  #>   `var` must be a symbol but is an object of class 'call'"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Asserts That a Parameter is Provided in the Expected Unit — assert_unit","title":"Asserts That a Parameter is Provided in the Expected Unit — assert_unit","text":"Checks parameter (PARAMCD) dataset provided expected unit.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asserts That a Parameter is Provided in the Expected Unit — assert_unit","text":"","code":"assert_unit(dataset, param, required_unit, get_unit_expr)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asserts That a Parameter is Provided in the Expected Unit — assert_unit","text":"dataset data.frame param Parameter code parameter check required_unit Expected unit get_unit_expr Expression used provide unit param","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asserts That a Parameter is Provided in the Expected Unit — assert_unit","text":"function throws error unit variable differs unit observation parameter input dataset. Otherwise, dataset returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asserts That a Parameter is Provided in the Expected Unit — assert_unit","text":"","code":"library(tibble) advs <- tribble(   ~USUBJID, ~VSTESTCD, ~VSTRESN, ~VSSTRESU, ~PARAMCD, ~AVAL,   \"P01\",    \"WEIGHT\",      80.1, \"kg\",      \"WEIGHT\",  80.1,   \"P02\",    \"WEIGHT\",      85.7, \"kg\",      \"WEIGHT\",  85.7 )  assert_unit(advs, param = \"WEIGHT\", required_unit = \"kg\", get_unit_expr = VSSTRESU)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a List of Variables? — assert_vars","title":"Is an Argument a List of Variables? — assert_vars","text":"Checks argument valid list symbols (e.g., created exprs())","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a List of Variables? — assert_vars","text":"","code":"assert_vars(arg, expect_names = FALSE, optional = FALSE)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a List of Variables? — assert_vars","text":"arg function argument checked expect_names argument set TRUE, checked variables named, e.g., exprs(APERSDT = APxxSDT, APEREDT = APxxEDT). optional checked parameter optional? set FALSE arg NULL error thrown","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a List of Variables? — assert_vars","text":"function throws error arg list symbols (e.g., created exprs() returns input invisibly otherwise.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a List of Variables? — assert_vars","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(rlang)  example_fun <- function(by_vars) {   assert_vars(by_vars) }  example_fun(exprs(USUBJID, PARAMCD))  try(example_fun(quos(USUBJID, PARAMCD))) #> Error in assert_list_of(arg, \"symbol\", named = expect_names, optional = optional) :  #>   Each element of `arg` must be an object of class/type 'symbol' but the following are not: #> ✖ Element 1 is an object of class 'quosure' #> ✖ Element 2 is an object of class 'quosure'  try(example_fun(c(\"USUBJID\", \"PARAMCD\", \"VISIT\"))) #> Error in assert_s3_class(arg, \"list\") :  #>   `arg` must be an object of class 'list' but is a character vector  try(example_fun(exprs(USUBJID, toupper(PARAMCD), desc(AVAL)))) #> Error in assert_list_of(arg, \"symbol\", named = expect_names, optional = optional) :  #>   Each element of `arg` must be an object of class/type 'symbol' but the following are not: #> ✖ Element 2 is an object of class 'call' #> ✖ Element 3 is an object of class 'call'  example_fun_name <- function(by_vars) {   assert_vars(by_vars, expect_names = TRUE) }  example_fun_name(exprs(APERSDT = APxxSDT, APEREDT = APxxEDT))  try(example_fun_name(exprs(APERSDT = APxxSDT, APxxEDT))) #> Error in assert_list_of(arg, \"symbol\", named = expect_names, optional = optional) :  #>   All elements of arg must be named. #> The following elements are not named: 2"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_varval_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Argument a Variable-Value List? — assert_varval_list","title":"Is an Argument a Variable-Value List? — assert_varval_list","text":"Checks argument list expressions expressions variable-value pairs. value can symbol, string, numeric, NA. general expression allowed.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_varval_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Argument a Variable-Value List? — assert_varval_list","text":"","code":"assert_varval_list(   arg,   required_elements = NULL,   accept_expr = FALSE,   accept_var = FALSE,   optional = FALSE )"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_varval_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Argument a Variable-Value List? — assert_varval_list","text":"arg function argument checked required_elements character vector names must present arg accept_expr expressions right hand side accepted? accept_var unnamed variable names (e.g. exprs(USUBJID)) right hand side accepted? optional checked parameter optional? set FALSE arg NULL error thrown.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_varval_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an Argument a Variable-Value List? — assert_varval_list","text":"function throws error arg list variable-value expressions. Otherwise, input returned invisibly.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/assert_varval_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Argument a Variable-Value List? — assert_varval_list","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(rlang)  example_fun <- function(vars) {   assert_varval_list(vars) } example_fun(exprs(DTHDOM = \"AE\", DTHSEQ = AESEQ))  try(example_fun(exprs(\"AE\", DTSEQ = AESEQ))) #> Error in assert_varval_list(vars) :  #>   `vars` must be a named list of expressions where each element is a symbol, character scalar, numeric scalar, or `NA` but it is a list #> ℹ To create a list of expressions use `exprs()`"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/backquote.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a String in Backquotes — backquote","title":"Wrap a String in Backquotes — backquote","text":"Wrap String Backquotes","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/backquote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a String in Backquotes — backquote","text":"","code":"backquote(x)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/backquote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a String in Backquotes — backquote","text":"x character vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/backquote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap a String in Backquotes — backquote","text":"character vector","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/contains_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"check that argument contains valid variable(s) created with exprs() or\nSource Variables from a List of Expressions — contains_vars","title":"check that argument contains valid variable(s) created with exprs() or\nSource Variables from a List of Expressions — contains_vars","text":"check argument contains valid variable(s) created exprs() Source Variables List Expressions","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/contains_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check that argument contains valid variable(s) created with exprs() or\nSource Variables from a List of Expressions — contains_vars","text":"","code":"contains_vars(arg)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/contains_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check that argument contains valid variable(s) created with exprs() or\nSource Variables from a List of Expressions — contains_vars","text":"arg function argument checked","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/contains_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check that argument contains valid variable(s) created with exprs() or\nSource Variables from a List of Expressions — contains_vars","text":"TRUE variables valid variable","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/convert_dtm_to_dtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Convert Date (or Date-time) Objects to Characters of dtc Format\n(-DTC type of variable) — convert_dtm_to_dtc","title":"Helper Function to Convert Date (or Date-time) Objects to Characters of dtc Format\n(-DTC type of variable) — convert_dtm_to_dtc","text":"Helper Function Convert Date (Date-time) Objects Characters dtc Format (-DTC type variable)","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/convert_dtm_to_dtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Convert Date (or Date-time) Objects to Characters of dtc Format\n(-DTC type of variable) — convert_dtm_to_dtc","text":"","code":"convert_dtm_to_dtc(dtm)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/convert_dtm_to_dtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Convert Date (or Date-time) Objects to Characters of dtc Format\n(-DTC type of variable) — convert_dtm_to_dtc","text":"dtm date date-time","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/convert_dtm_to_dtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Convert Date (or Date-time) Objects to Characters of dtc Format\n(-DTC type of variable) — convert_dtm_to_dtc","text":"character vector","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/dataset_vignette.html","id":null,"dir":"Reference","previous_headings":"","what":"Output a Dataset in a Vignette in the admiral Format — dataset_vignette","title":"Output a Dataset in a Vignette in the admiral Format — dataset_vignette","text":"Output dataset vignette pre-specified admiral format.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/dataset_vignette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output a Dataset in a Vignette in the admiral Format — dataset_vignette","text":"","code":"dataset_vignette(dataset, display_vars = NULL, filter = NULL)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/dataset_vignette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output a Dataset in a Vignette in the admiral Format — dataset_vignette","text":"dataset Dataset output vignette display_vars Variables selected demonstrate outcome derivation Permitted Values: list variables Default NULL display_vars NULL, selected variables visible vignette variables hidden. can made visible clicking theChoose columns display button. filter Filter condition specified condition applied dataset displayed. Permitted Values: condition","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/dataset_vignette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output a Dataset in a Vignette in the admiral Format — dataset_vignette","text":"HTML table","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/dquote.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a String in Double Quotes — dquote","title":"Wrap a String in Double Quotes — dquote","text":"Wrap string double quotes, e.g., displaying character values messages.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/dquote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a String in Double Quotes — dquote","text":"","code":"dquote(x)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/dquote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a String in Double Quotes — dquote","text":"x character vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/dquote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap a String in Double Quotes — dquote","text":"input NULL, text \"NULL\" returned. Otherwise, input double quotes returned.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/enumerate.html","id":null,"dir":"Reference","previous_headings":"","what":"Enumerate Multiple Elements — enumerate","title":"Enumerate Multiple Elements — enumerate","text":"Enumerate multiple elements vector list.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/enumerate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enumerate Multiple Elements — enumerate","text":"","code":"enumerate(x, quote_fun = backquote, conjunction = \"and\")"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/enumerate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enumerate Multiple Elements — enumerate","text":"x vector list quote_fun Quoting function, defaults backquote. set NULL, elements quoted. conjunction Character used message, defaults \"\".","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/enumerate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enumerate Multiple Elements — enumerate","text":"character vector","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/enumerate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enumerate Multiple Elements — enumerate","text":"","code":"enumerate(c(\"one\", \"two\", \"three\")) #> [1] \"`one`, `two` and `three`\"  enumerate(c(1, 2, 3), quote_fun = NULL) #> [1] \"1, 2 and 3\""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/expect_dfs_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation: Are Two Datasets Equal? — expect_dfs_equal","title":"Expectation: Are Two Datasets Equal? — expect_dfs_equal","text":"Uses diffdf::diffdf() compares 2 datasets differences. function can thought R-equivalent SAS proc compare useful tool unit testing well.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/expect_dfs_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expectation: Are Two Datasets Equal? — expect_dfs_equal","text":"","code":"expect_dfs_equal(base, compare, keys, ...)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/expect_dfs_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation: Are Two Datasets Equal? — expect_dfs_equal","text":"base Input dataset compare Comparison dataset keys character vector variables define unique row base compare datasets ... Additional arguments passed onto diffdf::diffdf()","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/expect_dfs_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation: Are Two Datasets Equal? — expect_dfs_equal","text":"error base compare match NULL invisibly ","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/expect_dfs_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation: Are Two Datasets Equal? — expect_dfs_equal","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(tibble)  tbl1 <- tribble(   ~USUBJID, ~AGE, ~SEX,   \"1001\", 18, \"M\",   \"1002\", 19, \"F\",   \"1003\", 20, \"M\",   \"1004\", 18, \"F\" )  tbl2 <- tribble(   ~USUBJID, ~AGE, ~SEX,   \"1001\", 18, \"M\",   \"1002\", 18.9, \"F\",   \"1003\", 20, NA )  try(expect_dfs_equal(tbl1, tbl2, keys = \"USUBJID\")) #> Error : Differences found between the objects! #>  #> A summary is given below. #>  #> There are rows in BASE that are not in COMPARE !! #> All rows are shown in table below #>  #>   ========= #>    USUBJID  #>   --------- #>     1004    #>   --------- #>  #> Not all Values Compared Equal #> All rows are shown in table below #>  #>   ============================= #>    Variable  No of Differences  #>   ----------------------------- #>      AGE             1          #>      SEX             1          #>   ----------------------------- #>  #>  #> All rows are shown in table below #>  #>   ================================== #>    VARIABLE  USUBJID  BASE  COMPARE  #>   ---------------------------------- #>      AGE      1002     19    18.9    #>   ---------------------------------- #>  #>  #> All rows are shown in table below #>  #>   ================================== #>    VARIABLE  USUBJID  BASE  COMPARE  #>   ---------------------------------- #>      SEX      1003     M     <NA>    #>   ---------------------------------- #>   tlb3 <- tribble(   ~USUBJID, ~AGE, ~SEX,   \"1004\", 18, \"F\",   \"1003\", 20, \"M\",   \"1002\", 19, \"F\",   \"1001\", 18, \"M\", )  # Note the sorting order of the keys is not required expect_dfs_equal(tbl1, tlb3, keys = \"USUBJID\")"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/expr_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate One or More Expressions — expr_c","title":"Concatenate One or More Expressions — expr_c","text":"Concatenate One Expressions","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/expr_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate One or More Expressions — expr_c","text":"","code":"expr_c(...)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/expr_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate One or More Expressions — expr_c","text":"... One expressions list expressions","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/expr_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate One or More Expressions — expr_c","text":"list expressions","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/extract_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract All Symbols from a List of Expressions — extract_vars","title":"Extract All Symbols from a List of Expressions — extract_vars","text":"Extract Symbols List Expressions","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/extract_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract All Symbols from a List of Expressions — extract_vars","text":"","code":"extract_vars(x, side = \"lhs\")"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/extract_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract All Symbols from a List of Expressions — extract_vars","text":"x R object side One \"lhs\" (default) \"rhs\"","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/extract_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract All Symbols from a List of Expressions — extract_vars","text":"list expressions","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/filter_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Optional Filter — filter_if","title":"Optional Filter — filter_if","text":"Filters input dataset provided expression NULL","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/filter_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optional Filter — filter_if","text":"","code":"filter_if(dataset, filter)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/filter_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optional Filter — filter_if","text":"dataset Input dataset filter filter condition. Must expression.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/filter_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optional Filter — filter_if","text":"data.frame containing rows dataset matching filter just dataset filter NULL","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_constant_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Constant Variables — get_constant_vars","title":"Get Constant Variables — get_constant_vars","text":"Get Constant Variables","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_constant_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Constant Variables — get_constant_vars","text":"","code":"get_constant_vars(dataset, by_vars, ignore_vars = NULL)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_constant_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Constant Variables — get_constant_vars","text":"dataset data frame. by_vars variables groups defined variables considered separately. .e., variable constant within group, returned. ignore_vars Variables ignore specified variables considered, .e., returned even constant (unless included variables). Permitted Values: list variable names selector function calls like starts_with(\"EX\")","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_constant_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Constant Variables — get_constant_vars","text":"Variable vector.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a Dataset from the admiraldev_environment environment — get_dataset","title":"Retrieve a Dataset from the admiraldev_environment environment — get_dataset","text":"Retrieve Dataset admiraldev_environment environment","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a Dataset from the admiraldev_environment environment — get_dataset","text":"","code":"get_dataset(name)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a Dataset from the admiraldev_environment environment — get_dataset","text":"name name dataset retrieve","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a Dataset from the admiraldev_environment environment — get_dataset","text":"data.frame","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Duplicates From a Vector — get_duplicates","title":"Get Duplicates From a Vector — get_duplicates","text":"Get Duplicates Vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Duplicates From a Vector — get_duplicates","text":"","code":"get_duplicates(x)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Duplicates From a Vector — get_duplicates","text":"x atomic vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Duplicates From a Vector — get_duplicates","text":"vector type x contain duplicate values","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Duplicates From a Vector — get_duplicates","text":"","code":"get_duplicates(1:10) #> integer(0)  get_duplicates(c(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) #> [1] \"a\" \"d\""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_new_tmp_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a New Temporary Variable Name for a Dataset — get_new_tmp_var","title":"Get a New Temporary Variable Name for a Dataset — get_new_tmp_var","text":"Get New Temporary Variable Name Dataset","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_new_tmp_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a New Temporary Variable Name for a Dataset — get_new_tmp_var","text":"","code":"get_new_tmp_var(dataset, prefix = \"tmp_var\")"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_new_tmp_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a New Temporary Variable Name for a Dataset — get_new_tmp_var","text":"dataset input dataset prefix prefix new temporary variable name create","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_new_tmp_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a New Temporary Variable Name for a Dataset — get_new_tmp_var","text":"name new temporary variable symbol","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_new_tmp_var.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a New Temporary Variable Name for a Dataset — get_new_tmp_var","text":"function returns new unique temporary variable name used inside dataset. temporary variable names structure prefix_n n integer, e.g. tmp_var_1. already variable inside datset given prefix suffix increased 1, e.g. tmp_var_1 already exists get_new_tmp_var() return tmp_var_2.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_new_tmp_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a New Temporary Variable Name for a Dataset — get_new_tmp_var","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(admiral_dm)  tmp_var <- get_new_tmp_var(admiral_dm) mutate(admiral_dm, !!tmp_var := NA) #> # A tibble: 306 x 26 #>    STUDYID   DOMAIN USUBJID  SUBJID RFSTDTC   RFENDTC  RFXSTDTC RFXENDTC RFICDTC #>    <chr>     <chr>  <chr>    <chr>  <chr>     <chr>    <chr>    <chr>    <chr>   #>  1 CDISCPIL… DM     01-701-… 1015   \"2014-01… \"2014-0… \"2014-0… \"2014-0… \"\"      #>  2 CDISCPIL… DM     01-701-… 1023   \"2012-08… \"2012-0… \"2012-0… \"2012-0… \"\"      #>  3 CDISCPIL… DM     01-701-… 1028   \"2013-07… \"2014-0… \"2013-0… \"2014-0… \"\"      #>  4 CDISCPIL… DM     01-701-… 1033   \"2014-03… \"2014-0… \"2014-0… \"2014-0… \"\"      #>  5 CDISCPIL… DM     01-701-… 1034   \"2014-07… \"2014-1… \"2014-0… \"2014-1… \"\"      #>  6 CDISCPIL… DM     01-701-… 1047   \"2013-02… \"2013-0… \"2013-0… \"2013-0… \"\"      #>  7 CDISCPIL… DM     01-701-… 1057   \"\"        \"\"       \"\"       \"\"       \"\"      #>  8 CDISCPIL… DM     01-701-… 1097   \"2014-01… \"2014-0… \"2014-0… \"2014-0… \"\"      #>  9 CDISCPIL… DM     01-701-… 1111   \"2012-09… \"2012-0… \"2012-0… \"2012-0… \"\"      #> 10 CDISCPIL… DM     01-701-… 1115   \"2012-11… \"2013-0… \"2012-1… \"2013-0… \"\"      #> # … with 296 more rows, and 17 more variables: RFPENDTC <chr>, DTHDTC <chr>, #> #   DTHFL <chr>, SITEID <chr>, AGE <dbl>, AGEU <chr>, SEX <chr>, RACE <chr>, #> #   ETHNIC <chr>, ARMCD <chr>, ARM <chr>, ACTARMCD <chr>, ACTARM <chr>, #> #   COUNTRY <chr>, DMDTC <chr>, DMDY <dbl>, tmp_var_1 <lgl>"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_source_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Source Variables from a List of Expressions — get_source_vars","title":"Get Source Variables from a List of Expressions — get_source_vars","text":"Get Source Variables List Expressions","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_source_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Source Variables from a List of Expressions — get_source_vars","text":"","code":"get_source_vars(expressions, quosures)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_source_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Source Variables from a List of Expressions — get_source_vars","text":"expressions list expressions quosures Deprecated, please use expressions instead.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/get_source_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Source Variables from a List of Expressions — get_source_vars","text":"list expressions","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/grapes-notin-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Negated Value Matching — %notin%","title":"Negated Value Matching — %notin%","text":"Returns logical vector indicating match left operand right operand.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/grapes-notin-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negated Value Matching — %notin%","text":"","code":"x %notin% table"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/grapes-notin-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negated Value Matching — %notin%","text":"x values matched table values matched ","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/grapes-notin-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negated Value Matching — %notin%","text":"logical vector","code":""},{"path":[]},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/grapes-or-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Or — %or%","text":"","code":"lhs %or% rhs"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/grapes-or-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Or — %or%","text":"lhs valid R expression rhs valid R expression","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/grapes-or-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Or — %or%","text":"Either result evaluating lhs, rhs error","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/grapes-or-grapes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Or — %or%","text":"function evaluates expression lhs expression results error, catches error proceeds evaluating expression rhs returns result.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if the argument equals the auto keyword — is_auto","title":"Checks if the argument equals the auto keyword — is_auto","text":"Checks argument equals auto keyword","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if the argument equals the auto keyword — is_auto","text":"","code":"is_auto(arg)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if the argument equals the auto keyword — is_auto","text":"arg argument check","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if the argument equals the auto keyword — is_auto","text":"TRUE argument equals auto keyword, .e., expression symbol named auto.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_named.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a named argument — is_named","title":"Is a named argument — is_named","text":"named argument","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_named.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a named argument — is_named","text":"","code":"is_named(x)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_named.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a named argument — is_named","text":"x R object","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_named.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a named argument — is_named","text":"TRUE argument named, FALSE otherwise","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_order_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Is order vars? — is_order_vars","title":"Is order vars? — is_order_vars","text":"Check inputs created using exprs() calls involving desc()","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_order_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is order vars? — is_order_vars","text":"","code":"is_order_vars(arg)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_order_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is order vars? — is_order_vars","text":"arg R object","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_order_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is order vars? — is_order_vars","text":"FALSE argument list order vars","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_valid_dtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Is this string a valid DTC — is_valid_dtc","title":"Is this string a valid DTC — is_valid_dtc","text":"string valid DTC","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_valid_dtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is this string a valid DTC — is_valid_dtc","text":"","code":"is_valid_dtc(arg)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_valid_dtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is this string a valid DTC — is_valid_dtc","text":"arg character vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/is_valid_dtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is this string a valid DTC — is_valid_dtc","text":"TRUE argument valid --DTC string, FALSE otherwise","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/joins.html","id":null,"dir":"Reference","previous_headings":"","what":"Join Functions — anti_join","title":"Join Functions — anti_join","text":"*_join() functions dplyr without warning different attributes datasets.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/joins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join Functions — anti_join","text":"","code":"anti_join(x, y, by = NULL, copy = FALSE, ...)  inner_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  left_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/joins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join Functions — anti_join","text":"x data.frame y data.frame character vector copy logical ... Additional arguments suffix character vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/joins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join Functions — anti_join","text":"data.frame","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/process_set_values_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Process set_values_to Argument — process_set_values_to","title":"Process set_values_to Argument — process_set_values_to","text":"function creates variables specified set_values_to argument, catches errors, provides user friendly error messages, optionally checks type created variables.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/process_set_values_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process set_values_to Argument — process_set_values_to","text":"","code":"process_set_values_to(dataset, set_values_to, expected_types = NULL)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/process_set_values_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process set_values_to Argument — process_set_values_to","text":"dataset Input dataset set_values_to Variables set named list returned exprs() defining variables set, e.g. exprs(PARAMCD = \"OS\", PARAM = \"Overall Survival\") expected. values must symbols, character strings, numeric values, expressions, NA. expected_types argument specified, specified variables checked whether specified type matches type variables created set_values_to. Permitted Values: character vector values \"numeric\" \"character\"","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/process_set_values_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process set_values_to Argument — process_set_values_to","text":"input dataset variables specified set_values_to added/updated","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/process_set_values_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process set_values_to Argument — process_set_values_to","text":"","code":"library(tibble) data <- tribble(   ~AVAL,   20 )  try(   process_set_values_to(     data,     set_values_to = exprs(       PARAMCD = BMI     )   ) ) #> Error in value[[3L]](cond) : Assigning variables failed! #> set_values_to = ( #>   PARAMCD = BMI #> ) #> Error message: #>   Error in `mutate_cols()`: #> ! Problem with `mutate()` input `PARAMCD`. #> ✖ object 'BMI' not found #> ℹ Input `PARAMCD` is `BMI`. #> Caused by error in `mask$eval_all_mutate()`: #> ! object 'BMI' not found #>   try(   process_set_values_to(     data,     set_values_to = exprs(       PARAMCD = 42     ),     expected_types = c(PARAMCD = \"character\")   ) ) #> Error in process_set_values_to(data, set_values_to = exprs(PARAMCD = 42),  :  #>   The following variables have an unexpected type: #> PARAMCD: expected: character, actual: numeric #>"},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/quo_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate One or More Quosure(s) — quo_c","text":"","code":"quo_c(...)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/quo_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate One or More Quosure(s) — quo_c","text":"... One objects class quosure quosures","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/quo_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate One or More Quosure(s) — quo_c","text":"object class quosures","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/quo_c.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Concatenate One or More Quosure(s) — quo_c","text":"function deprecated, please use expr_c() instead.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/quo_not_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Whether an Argument Is Not a Quosure of a Missing Argument — quo_not_missing","title":"Check Whether an Argument Is Not a Quosure of a Missing Argument — quo_not_missing","text":"Check Whether Argument Quosure Missing Argument","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/quo_not_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Whether an Argument Is Not a Quosure of a Missing Argument — quo_not_missing","text":"","code":"quo_not_missing(x)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/quo_not_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Whether an Argument Is Not a Quosure of a Missing Argument — quo_not_missing","text":"x Test object","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/quo_not_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Whether an Argument Is Not a Quosure of a Missing Argument — quo_not_missing","text":"TRUE error.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/remove_tmp_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove All Temporary Variables Created Within the Current Function Environment — remove_tmp_vars","title":"Remove All Temporary Variables Created Within the Current Function Environment — remove_tmp_vars","text":"Remove Temporary Variables Created Within Current Function Environment","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/remove_tmp_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove All Temporary Variables Created Within the Current Function Environment — remove_tmp_vars","text":"","code":"remove_tmp_vars(dataset)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/remove_tmp_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove All Temporary Variables Created Within the Current Function Environment — remove_tmp_vars","text":"dataset input dataset","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/remove_tmp_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove All Temporary Variables Created Within the Current Function Environment — remove_tmp_vars","text":"input dataset temporary variables removed","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/remove_tmp_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove All Temporary Variables Created Within the Current Function Environment — remove_tmp_vars","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(admiral_dm) dm <- select(admiral_dm, USUBJID) tmp_var <- get_new_tmp_var(dm) dm <- mutate(dm, !!tmp_var := NA)  ## This function creates two new temporary variables which are removed when calling ## `remove_tmp_vars()`. Note that any temporary variable created outside this ## function is **not** removed do_something <- function(dataset) {   tmp_var_1 <- get_new_tmp_var(dm)   tmp_var_2 <- get_new_tmp_var(dm)   dm %>%     mutate(!!tmp_var_1 := NA, !!tmp_var_2 := NA) %>%     print() %>%     remove_tmp_vars() }  do_something(dm) #> # A tibble: 306 x 4 #>    USUBJID     tmp_var_1 tmp_var_2 tmp_var_3 #>    <chr>       <lgl>     <lgl>     <lgl>     #>  1 01-701-1015 NA        NA        NA        #>  2 01-701-1023 NA        NA        NA        #>  3 01-701-1028 NA        NA        NA        #>  4 01-701-1033 NA        NA        NA        #>  5 01-701-1034 NA        NA        NA        #>  6 01-701-1047 NA        NA        NA        #>  7 01-701-1057 NA        NA        NA        #>  8 01-701-1097 NA        NA        NA        #>  9 01-701-1111 NA        NA        NA        #> 10 01-701-1115 NA        NA        NA        #> # … with 296 more rows #> # A tibble: 306 x 2 #>    USUBJID     tmp_var_1 #>    <chr>       <lgl>     #>  1 01-701-1015 NA        #>  2 01-701-1023 NA        #>  3 01-701-1028 NA        #>  4 01-701-1033 NA        #>  5 01-701-1034 NA        #>  6 01-701-1047 NA        #>  7 01-701-1057 NA        #>  8 01-701-1097 NA        #>  9 01-701-1111 NA        #> 10 01-701-1115 NA        #> # … with 296 more rows"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_symbol_in_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Symbols in an Expression — replace_symbol_in_expr","title":"Replace Symbols in an Expression — replace_symbol_in_expr","text":"Replace symbols expression","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_symbol_in_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Symbols in an Expression — replace_symbol_in_expr","text":"","code":"replace_symbol_in_expr(expression, target, replace)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_symbol_in_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Symbols in an Expression — replace_symbol_in_expr","text":"expression Expression target Target symbol replace Replacing symbol","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_symbol_in_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Symbols in an Expression — replace_symbol_in_expr","text":"expression every occurrence symbol target replaced replace","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_symbol_in_expr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replace Symbols in an Expression — replace_symbol_in_expr","text":"Stefan Bundfuss","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_symbol_in_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Symbols in an Expression — replace_symbol_in_expr","text":"","code":"library(rlang)  replace_symbol_in_expr(expr(AVAL), target = AVAL, replace = AVAL.join) #> AVAL.join replace_symbol_in_expr(expr(AVALC), target = AVAL, replace = AVAL.join) #> AVALC replace_symbol_in_expr(expr(desc(AVAL)), target = AVAL, replace = AVAL.join) #> desc(AVAL.join)"},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_symbol_in_quo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Symbols in a Quosure — replace_symbol_in_quo","text":"","code":"replace_symbol_in_quo(quosure, target, replace)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_symbol_in_quo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Symbols in a Quosure — replace_symbol_in_quo","text":"quosure Quosure target Target symbol replace Replacing symbol","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_symbol_in_quo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Symbols in a Quosure — replace_symbol_in_quo","text":"quosure every occurrence symbol target replaced replace","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_symbol_in_quo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace Symbols in a Quosure — replace_symbol_in_quo","text":"function deprecated, please use replace_symbol_in_expr() instead.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_values_by_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Expression Value with Name — replace_values_by_names","title":"Replace Expression Value with Name — replace_values_by_names","text":"Replace Expression Value Name","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_values_by_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Expression Value with Name — replace_values_by_names","text":"","code":"replace_values_by_names(expressions, quosures)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_values_by_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Expression Value with Name — replace_values_by_names","text":"expressions list expressions quosures Deprecated, please use expressions instead.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/replace_values_by_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Expression Value with Name — replace_values_by_names","text":"list expressions","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/squote.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a String in Single Quotes — squote","title":"Wrap a String in Single Quotes — squote","text":"Wrap String Single Quotes","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/squote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a String in Single Quotes — squote","text":"","code":"squote(x)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/squote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a String in Single Quotes — squote","text":"x character vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/squote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap a String in Single Quotes — squote","text":"character vector","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/suppress_warning.html","id":null,"dir":"Reference","previous_headings":"","what":"Suppress Specific Warnings — suppress_warning","title":"Suppress Specific Warnings — suppress_warning","text":"Suppress certain warnings issued expression.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/suppress_warning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suppress Specific Warnings — suppress_warning","text":"","code":"suppress_warning(expr, regexpr)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/suppress_warning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suppress Specific Warnings — suppress_warning","text":"expr Expression executed regexpr Regular expression matching warnings suppress","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/suppress_warning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suppress Specific Warnings — suppress_warning","text":"Return value expression","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/suppress_warning.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suppress Specific Warnings — suppress_warning","text":"warnings issued expression match regular expression suppressed.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/valid_time_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid Time Units — valid_time_units","title":"Valid Time Units — valid_time_units","text":"Contains acceptable character vector valid time units","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/valid_time_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid Time Units — valid_time_units","text":"","code":"valid_time_units()"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/valid_time_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valid Time Units — valid_time_units","text":"character vector valid time units","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/vars2chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a List of Expressions into a Character Vector — vars2chr","title":"Turn a List of Expressions into a Character Vector — vars2chr","text":"Turn List Expressions Character Vector","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/vars2chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a List of Expressions into a Character Vector — vars2chr","text":"","code":"vars2chr(expressions, quosures)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/vars2chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a List of Expressions into a Character Vector — vars2chr","text":"expressions list expressions created using exprs() quosures Deprecated, please use expressions instead.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/vars2chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a List of Expressions into a Character Vector — vars2chr","text":"character vector","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/vars2chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a List of Expressions into a Character Vector — vars2chr","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(rlang)  vars2chr(exprs(USUBJID, AVAL)) #>                      #> \"USUBJID\"    \"AVAL\""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_incomplete_dtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn if incomplete dtc — warn_if_incomplete_dtc","title":"Warn if incomplete dtc — warn_if_incomplete_dtc","text":"Warn incomplete dtc","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_incomplete_dtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn if incomplete dtc — warn_if_incomplete_dtc","text":"","code":"warn_if_incomplete_dtc(dtc, n)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_incomplete_dtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn if incomplete dtc — warn_if_incomplete_dtc","text":"dtc character vector date-times ISO 8601 format n non-negative integer","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_incomplete_dtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warn if incomplete dtc — warn_if_incomplete_dtc","text":"warning dtc contains partial dates","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_inconsistent_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn If Two Lists are Inconsistent — warn_if_inconsistent_list","title":"Warn If Two Lists are Inconsistent — warn_if_inconsistent_list","text":"Checks two list inputs names number elements issues warning otherwise.","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_inconsistent_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn If Two Lists are Inconsistent — warn_if_inconsistent_list","text":"","code":"warn_if_inconsistent_list(base, compare, list_name, i = 2)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_inconsistent_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn If Two Lists are Inconsistent — warn_if_inconsistent_list","text":"base named list compare named list list_name string name list index id compare 2 lists","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_inconsistent_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warn If Two Lists are Inconsistent — warn_if_inconsistent_list","text":"warning 2 lists different names length","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_inconsistent_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warn If Two Lists are Inconsistent — warn_if_inconsistent_list","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(rlang)  # no warning warn_if_inconsistent_list(   base = exprs(DTHDOM = \"DM\", DTHSEQ = DMSEQ),   compare = exprs(DTHDOM = \"DM\", DTHSEQ = DMSEQ),   list_name = \"Test\" ) # warning warn_if_inconsistent_list(   base = exprs(DTHDOM = \"DM\", DTHSEQ = DMSEQ, DTHVAR = \"text\"),   compare = exprs(DTHDOM = \"DM\", DTHSEQ = DMSEQ),   list_name = \"Test\" ) #> Warning: The variables used for traceability in `Test` are not consistent, please check: #> source 1 , Variables are given as: DTHDOM DTHSEQ DTHVAR  #> source 2 , Variables are given as: DTHDOM DTHSEQ"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_invalid_dtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn If a Vector Contains Unknown Datetime Format — warn_if_invalid_dtc","title":"Warn If a Vector Contains Unknown Datetime Format — warn_if_invalid_dtc","text":"Warn vector contains unknown datetime format \"2003-12-15T-:15:18\", \"2003-12-15T13:-:19\",\"--12-15\",\"-----T07:15\"","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_invalid_dtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn If a Vector Contains Unknown Datetime Format — warn_if_invalid_dtc","text":"","code":"warn_if_invalid_dtc(dtc, is_valid = is_valid_dtc(dtc))"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_invalid_dtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn If a Vector Contains Unknown Datetime Format — warn_if_invalid_dtc","text":"dtc character vector containing dates is_valid logical vector indicating whether elements dtc valid","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_invalid_dtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warn If a Vector Contains Unknown Datetime Format — warn_if_invalid_dtc","text":"return value, called side effects","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_invalid_dtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warn If a Vector Contains Unknown Datetime Format — warn_if_invalid_dtc","text":"","code":"## No warning as `dtc` is a valid date format warn_if_invalid_dtc(dtc = \"2021-04-06\")  ## Issues a warning warn_if_invalid_dtc(dtc = \"2021-04-06T-:30:30\")"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_vars_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn If a Variable Already Exists — warn_if_vars_exist","title":"Warn If a Variable Already Exists — warn_if_vars_exist","text":"Warn variable already exists inside dataset","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_vars_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn If a Variable Already Exists — warn_if_vars_exist","text":"","code":"warn_if_vars_exist(dataset, vars)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_vars_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn If a Variable Already Exists — warn_if_vars_exist","text":"dataset data.frame vars character vector columns check dataset","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_vars_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warn If a Variable Already Exists — warn_if_vars_exist","text":"return value, called side effects","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/warn_if_vars_exist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warn If a Variable Already Exists — warn_if_vars_exist","text":"","code":"library(admiral.test) data(admiral_dm)  ## No warning as `AAGE` doesn't exist in `dm` warn_if_vars_exist(admiral_dm, \"AAGE\")  ## Issues a warning warn_if_vars_exist(admiral_dm, \"ARM\") #> Warning: Variable `ARM` already exists in the dataset"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/what_is_it.html","id":null,"dir":"Reference","previous_headings":"","what":"What Kind of Object is This? — what_is_it","title":"What Kind of Object is This? — what_is_it","text":"Returns string describing kind object input .","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/what_is_it.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What Kind of Object is This? — what_is_it","text":"","code":"what_is_it(x)"},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/what_is_it.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"What Kind of Object is This? — what_is_it","text":"x R object","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/what_is_it.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"What Kind of Object is This? — what_is_it","text":"character description type x","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/reference/what_is_it.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"What Kind of Object is This? — what_is_it","text":"","code":"what_is_it(\"abc\") #> [1] \"`\\\"abc\\\"`\" what_is_it(1L) #> [1] \"`1`\" what_is_it(1:10) #> [1] \"an integer vector\" what_is_it(mtcars) #> [1] \"a data frame\""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"admiraldev 0.3.0","text":"New function process_set_values_to() creating variables specified set_value_to argument catching errors (#70)","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"updates-of-existing-functions-0-3-0","dir":"Changelog","previous_headings":"","what":"Updates of Existing Functions","title":"admiraldev 0.3.0","text":"Using testthat3e (testthat 3rd edition) unit testing. stricter messages must addressed deprecated functions throw errors. (#230) Fix datatable styling documentation (#197) assert_character_vector() function gained named argument check elements vector named. (#70) assert_list_of() function gained named argument check elements list named. (#203) quote_fun argument enumerate() extended NULL can specified request quoting elements. (#203) assert_list_of() function enhanced also considers type element, e.g., check value list symbols. (#208)","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"admiraldev 0.3.0","text":"default value optional argument assert_date_vector(), assert_list_of(), assert_s3_class() changed TRUE FALSE make default behavior consistent. (#87) quo_c() replace_symbol_in_quo() quosures argument get_source_vars(), replace_values_by_names(), vars2chr()","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"documentation-0-3-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"admiraldev 0.3.0","text":"New section programming strategy regarding comments (#71) Removed requirement add @author tags code scripts programming strategy, tracking authors DESCRIPTION file. Authors removed function documentation line update. (#206, #210)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"admiraldev 0.2.0","text":"Developer addin formatting tests admiral programming standards (#73) New functions replace_symbol_in_quo() add_suffix_to_vars() (#106) New function assert_atomic_vector() (#98) New keyword/family create_aux functions creating auxiliary datasets (#126) New function assert_date_vector() (#129) New function assert_same_type() (#176) Remove dependency {assertthat} (#149) Test coverage admiraldev increased 45% approximately 100% (#94, #95, #96, #98, #101, #103) Environment objects consolidated single admiraldev_environment object R/admiraldev_environment.R. (#179)","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"updates-of-existing-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"Updates of Existing Functions","title":"admiraldev 0.2.0","text":"expect_names argument added assert_vars() check variables named (#117) Remove dplyr function exports migration user facing function negate_vars() admiral (#83)","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"admiraldev 0.2.0","text":"longer compatible admiral (<0.9)","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"documentation-0-2-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"admiraldev 0.2.0","text":"New vignette package release strategy (#79) Updated multiple roxygen headers (#116, #133, #134, #141, #145, #172) Description admiral options work certain function inputs, .e subject_keys (#133)","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"various-0-2-0","dir":"Changelog","previous_headings":"","what":"Various","title":"admiraldev 0.2.0","text":"PR Checklist Template updated (#172) New authors/contributors (#158)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"admiraldev 0.1.0","text":"Developer specific functions brought admiral Developer specific vignettes brought admiral New admiraldev website created","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"updates-of-existing-functions-0-1-0","dir":"Changelog","previous_headings":"","what":"Updates of Existing Functions","title":"admiraldev 0.1.0","text":"NA","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"admiraldev 0.1.0","text":"NA","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"documentation-0-1-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"admiraldev 0.1.0","text":"NA","code":""},{"path":"https://pharmaverse.github.io/admiraldev/devel/news/index.html","id":"various-0-1-0","dir":"Changelog","previous_headings":"","what":"Various","title":"admiraldev 0.1.0","text":"NA","code":""}]
